package mongotypes

import (
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"fmt"
	"testing"
)

func TestDecodeOpQuery(t *testing.T) {
	authRequestBytes, _ := hex.DecodeString(`9c0100000800000000000000d40700000400000061646d696e2e24636d640000000000ffffffff750100001069734d617374657200010000000868656c6c6f4f6b00010373706563756c617469766541757468656e746963617465009b000000107361736c53746172740001000000026d656368616e69736d000e000000534352414d2d5348412d32353600057061796c6f6164002c000000006e2c2c6e3d726f6f742c723d48386d4a4a76756a36593974522f75492f6149767a4b68392b67584537697654026462000600000061646d696e00036f7074696f6e73001900000008736b6970456d70747945786368616e67650001000004636f6d7072657373696f6e00050000000003636c69656e74008a000000036472697665720034000000026e616d6500100000006d6f6e676f2d676f2d647269766572000276657273696f6e000800000076312e31342e300000036f73002e0000000274797065000700000064617277696e0002617263686974656374757265000600000061726d3634000002706c6174666f726d0009000000676f312e32312e35000000`)
	pkt, err := Decode(bytes.NewBuffer(authRequestBytes))
	if err != nil {
		t.Fatalf("expected to decode packet, err=%v", err)
	}
	opQuery := DecodeOpQuery(pkt)
	if opQuery == nil {
		t.Fatal("expected non nil when decoding OP_QUERY")
	}
	var out map[string]any
	err = opQuery.UnmarshalBSON(&out)
	if err != nil {
		t.Fatalf("got error when decoding OP_QUERY into map, err=%v", err)
	}
	if _, ok := out["speculativeAuthenticate"]; !ok {
		t.Errorf("speculativeAuthenticate attribute not found")
	}
	outMap := out["speculativeAuthenticate"].(map[string]any)
	// outMap["db"] = "admin"

	fmt.Printf("OUT:%#v\n", out)
	// out
	dataBytes, _ := opQuery.EncodeFull(outMap)
	t.Errorf("%X\n", dataBytes)
}

func TestCodecHelloCommand(t *testing.T) {
	clientHelloCmdBytes, _ := hex.DecodeString(`9c0100000800000000000000d40700000400000061646d696e2e24636d640000000000ffffffff750100001069734d617374657200010000000868656c6c6f4f6b00010373706563756c617469766541757468656e746963617465009b000000107361736c53746172740001000000026d656368616e69736d000e000000534352414d2d5348412d32353600057061796c6f6164002c000000006e2c2c6e3d726f6f742c723d48386d4a4a76756a36593974522f75492f6149767a4b68392b67584537697654026462000600000061646d696e00036f7074696f6e73001900000008736b6970456d70747945786368616e67650001000004636f6d7072657373696f6e00050000000003636c69656e74008a000000036472697665720034000000026e616d6500100000006d6f6e676f2d676f2d647269766572000276657273696f6e000800000076312e31342e300000036f73002e0000000274797065000700000064617277696e0002617263686974656374757265000600000061726d3634000002706c6174666f726d0009000000676f312e32312e35000000`)

	// helloCmdPkt, err := Decode(bytes.NewBuffer(clientHelloCmdBytes))
	// if err != nil {
	// 	t.Fatal(err)
	// }
	helloCmd, err := DecodeClientHelloCommand(bytes.NewBuffer(clientHelloCmdBytes))
	if err != nil {
		t.Fatal(err)
	}
	respHelloCmd, err := NewHelloCommandPacket(
		helloCmd,
		binary.LittleEndian.Uint32(clientHelloCmdBytes[4:8]),
		binary.LittleEndian.Uint32([]byte{0x04, 0x00, 0x00, 0x00}),
		binary.LittleEndian.Uint32([]byte{0x00, 0x00, 0x00, 0x00}),
		binary.LittleEndian.Uint32([]byte{0xff, 0xff, 0xff, 0xff}),
	)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(clientHelloCmdBytes, respHelloCmd.Encode()) {
		t.Error("hello command does not match")
		t.Error("got -->")
		t.Error("\n" + hex.Dump(respHelloCmd.Encode()))
		t.Error("want -->")
		t.Error("\n" + hex.Dump(clientHelloCmdBytes))
	}
}

func TestCodecSaslContinue(t *testing.T) {
	salsContinueBytes, _ := hex.DecodeString(`d50000000900000000000000dd0700000000000000c0000000107361736c436f6e74696e7565000100000010636f6e766572736174696f6e49640001000000057061796c6f6164007800000000633d626977732c723d48386d4a4a76756a36593974522f75492f6149767a4b68392b675845376976546159707159756b375476502f3163654666745a425650374b45464d614e6462502c703d304f35503173384c737055787a642b7259683235767241746838525333486c4d6a537a52546764663341383d02246462000600000061646d696e0000`)
	pkt, err := NewSaslContinuePacket(&SaslContinueRequest{
		SaslContinue:   1,
		ConversationID: 1,
		Payload: func() []byte {
			v, _ := hex.DecodeString(`633d626977732c723d48386d4a4a76756a36593974522f75492f6149767a4b68392b675845376976546159707159756b375476502f3163654666745a425650374b45464d614e6462502c703d304f35503173384c737055787a642b7259683235767241746838525333486c4d6a537a52546764663341383d`)
			return v
		}(),
		Database: "admin",
	}, 9, 0)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(salsContinueBytes, pkt.Encode()) {
		t.Errorf("expected match sasl continue")
		t.Error("got -->")
		t.Error("\n" + hex.Dump(pkt.Encode()))
		t.Error("want -->")
		t.Error("\n" + hex.Dump(salsContinueBytes))
	}
}
