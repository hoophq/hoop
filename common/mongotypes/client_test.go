package mongotypes

import (
	"bytes"
	"encoding/hex"
	"reflect"
	"testing"
)

func TestEncodeDecodeClientHello(t *testing.T) {
	clientInfo := ClientInfo{
		Application: &ClientApplication{Name: "MongoDB Compass"},
		Driver:      ClientDriver{Name: "nodejs", Version: "6.5.0"},
		Platform:    "Node.js v18.18.2, LE",

		OS: ClientOS{Name: "darwin", Architecture: "arm64", Version: "23.4.0", Type: "Darwin"},
	}
	for _, tt := range []struct {
		msg          string
		pkt          string
		want         *HelloCommand
		withSpecAuth bool
		err          error
	}{
		{
			msg:  "it must decode and encode without speculative auth attribute",
			pkt:  `46010000d502000000000000d40700000000000061646d696e2e24636d640000000000ffffffff1f0100001069736d617374657200010000000868656c6c6f4f6b000103636c69656e7400dc000000036170706c69636174696f6e001f000000026e616d6500100000004d6f6e676f444220436f6d706173730000036472697665720029000000026e616d6500070000006e6f64656a73000276657273696f6e0006000000362e352e30000002706c6174666f726d00150000004e6f64652e6a73207631382e31382e322c204c4500036f730053000000026e616d65000700000064617277696e0002617263686974656374757265000600000061726d3634000276657273696f6e000700000032332e342e30000274797065000700000044617277696e00000004636f6d7072657373696f6e0011000000023000050000006e6f6e65000000`,
			want: &HelloCommand{IsMaster: 1, HelloOK: true, Compression: []any{"none"}, ClientInfo: clientInfo},
		},
		{
			msg:          "it must decode and encode with speculative auth attribute",
			pkt:          `30020000d602000000000000d40700000000000061646d696e2e24636d640000000000ffffffff090200001069736d617374657200010000000868656c6c6f4f6b000103636c69656e7400dc000000036170706c69636174696f6e001f000000026e616d6500100000004d6f6e676f444220436f6d706173730000036472697665720029000000026e616d6500070000006e6f64656a73000276657273696f6e0006000000362e352e30000002706c6174666f726d00150000004e6f64652e6a73207631382e31382e322c204c4500036f730053000000026e616d65000700000064617277696e0002617263686974656374757265000600000061726d3634000276657273696f6e000700000032332e342e30000274797065000700000044617277696e00000004636f6d7072657373696f6e0011000000023000050000006e6f6e650000027361736c537570706f727465644d65636873000b00000061646d696e2e6e6f6f70000373706563756c617469766541757468656e74696361746500ae000000107361736c53746172740001000000026d656368616e69736d000e000000534352414d2d5348412d32353600057061796c6f6164002c000000006e2c2c6e3d6e6f6f702c723d7761706d4b595a384e503767333959726d415835596b63724330497337497631106175746f417574686f72697a650001000000036f7074696f6e73001900000008736b6970456d70747945786368616e6765000100026462000600000061646d696e000000`,
			withSpecAuth: true,
			want: &HelloCommand{IsMaster: 1, HelloOK: true, Compression: []any{"none"}, ClientInfo: clientInfo,
				SaslSupportedMechs: func(v string) *string { return &v }("admin.noop"),
				SpeculativeAuthenticate: &SaslRequest{
					SaslStart: 1,
					Mechanism: "SCRAM-SHA-256",
					Payload:   []byte{0x6e, 0x2c, 0x2c, 0x6e, 0x3d, 0x6e, 0x6f, 0x6f, 0x70, 0x2c, 0x72, 0x3d, 0x77, 0x61, 0x70, 0x6d, 0x4b, 0x59, 0x5a, 0x38, 0x4e, 0x50, 0x37, 0x67, 0x33, 0x39, 0x59, 0x72, 0x6d, 0x41, 0x58, 0x35, 0x59, 0x6b, 0x63, 0x72, 0x43, 0x30, 0x49, 0x73, 0x37, 0x49, 0x76, 0x31},
					Options:   SaslOptions{SkipEmptyExchange: true},
					Database:  "admin",
				},
			},
		},
	} {
		t.Run(tt.msg, func(t *testing.T) {
			hexDec, _ := hex.DecodeString(tt.pkt)
			got, err := DecodeClientHelloCommand(bytes.NewBuffer(hexDec))
			if err != nil {
				t.Fatal(err)
			}
			if !reflect.DeepEqual(tt.want, got) {
				t.Errorf("obj does not match, got=%#v, \nwant=%#v", got, tt.want)
			}
		})
	}
}

func TestDecodeClientSaslContinue(t *testing.T) {
	wantPayload, _ := hex.DecodeString(`633d626977732c723d7761706d4b595a384e503767333959726d415835596b637243304973374976314f6148425a52724b37546254637a33614a3736654c704547467a544b37364a672c703d7747352b48704b69466f72304d504e71467163575770742f372b496d566b6e4270627a636241683761366b3d`)
	decHex, _ := hex.DecodeString(`d5000000d702000000000000dd0700000000000000c0000000107361736c436f6e74696e7565000100000010636f6e766572736174696f6e49640001000000057061796c6f6164007800000000633d626977732c723d7761706d4b595a384e503767333959726d415835596b637243304973374976314f6148425a52724b37546254637a33614a3736654c704547467a544b37364a672c703d7747352b48704b69466f72304d504e71467163575770742f372b496d566b6e4270627a636241683761366b3d02246462000600000061646d696e0000`)
	saslContinuePkt, err := Decode(bytes.NewBuffer(decHex))
	if err != nil {
		t.Fatalf("fail to decode sasl continue packet: %v", err)
	}
	gotPayload, err := DecodeSASLContinueRequest(saslContinuePkt)
	if err != nil {
		t.Fatalf("fail to decode sasl continue packet payload: %v", err)
	}
	if !bytes.Equal(gotPayload, wantPayload) {
		t.Errorf("expect payload to match, got=%X, want=%X", gotPayload, wantPayload)
	}
}

func TestNewSaslContinuePacket(t *testing.T) {
	want, _ := hex.DecodeString(`d5000000d702000000000000dd0700000000000000c0000000107361736c436f6e74696e7565000100000010636f6e766572736174696f6e49640001000000057061796c6f6164007800000000633d626977732c723d7761706d4b595a384e503767333959726d415835596b637243304973374976314f6148425a52724b37546254637a33614a3736654c704547467a544b37364a672c703d7747352b48704b69466f72304d504e71467163575770742f372b496d566b6e4270627a636241683761366b3d02246462000600000061646d696e0000`)
	payload, _ := hex.DecodeString(`633d626977732c723d7761706d4b595a384e503767333959726d415835596b637243304973374976314f6148425a52724b37546254637a33614a3736654c704547467a544b37364a672c703d7747352b48704b69466f72304d504e71467163575770742f372b496d566b6e4270627a636241683761366b3d`)
	got := NewSaslContinuePacket(727, 1, payload, "admin")
	if !bytes.Equal(got.Encode(), want) {
		t.Errorf("expected payload to match, got=%X, want=%X", got, want)
	}
}
