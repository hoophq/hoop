AWSTemplateFormatVersion: "2010-09-09"

Description: 'AWS CloudFormation to install Hoop Platform.'

Metadata:
  License: Apache-2.0

Parameters:
  AwsKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: cf-test

  AwsInstanceType:
    Type: String
    Description: WebServer EC2 instance type
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - g3.8xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
    Default: t3.small
    ConstraintDescription: must be a valid EC2 instance type.

  AppAccessLocation:
    Type: String
    Description: The IP address range that can access the Gateway
    Default: 0.0.0.0/0
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  AwsLatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64

  AwsCertificateArn:
    Type: String
    Description: The certificate arn for the load balancer
    Default: arn:aws:acm:us-west-2:200074533906:certificate/b99d6325-8ace-4936-8f91-36163177bab0

  AwsIdpDomain:
    Type: String
    Description: The name of the sign in prefix of Cognito
    Default: hoopbox

  # Hoop Configuration
  APIPublicDNS:
    Type: String
    Description: 'The public DNS of the API (HTTP and gRPC)'
    Default: selfhosted-demo.hoop.dev

  # AppIDPURI:
  #   Type: String
  #   Description: 'IDP configuration in URI format. <scheme>://<idp-client-id>:<idp-client-secret>@<idp-host>?<option>='

  AppLogLevel:
    Type: String
    Description: The log level of the gateway
    Default: info

  AppAdminUsernameRole:
    Type: String
    Description: 'Changes the name of the group to act as admin'
    Default: 'admin'

Resources:

  #####
  # VPC
  #####
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/20
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-ig

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-public-rt

  RouteInternetGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  #####
  # Public Subnets
  #####
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.192.1.0/24
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-public-subnet1

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 1
      - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.192.2.0/24
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-public-subnet2

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  #####
  # Nat Gateways
  #####
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-nat-gw1

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-nat-gw2

  #####
  # Private Subnets
  #####
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.192.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-private-subnet1

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-private-rt-1

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
      - 1
      - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref VPC
      CidrBlock: 10.192.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-private-subnet2

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-private-rt-2

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  ####
  # Database Instance
  ####

  HoopDBSecret:
    UpdateReplacePolicy: Retain
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub hoopdev/${AWS::StackName}/pgmaster
      Description: Postgres credentials for Hoop Gateway instance
      GenerateSecretString:
        SecretStringTemplate: '{"masteruser": "hoopdbmaster"}'
        GenerateStringKey: masterpassword
        PasswordLength: 28
        ExcludePunctuation: true
        ExcludeCharacters: '"@/\'

  HoopDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: App subnet group
      SubnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2

  HoopDB:
    Type: AWS::RDS::DBInstance
    DependsOn:
    - HoopDBSecret
    Properties:
      # DeletionPolicy: Snapshot
      # UpdateReplacePolicy: Snapshot
      AvailabilityZone: !Select
      - 0
      - Fn::GetAZs: !Ref 'AWS::Region'
      DBSubnetGroupName: !Ref HoopDBSubnetGroup
      AllocatedStorage: "10"
      DBInstanceClass: db.t3.micro
      BackupRetentionPeriod: 14
      Engine: postgres
      MasterUsername:
        Fn::Sub: "{{resolve:secretsmanager:${HoopDBSecret}::masteruser}}"
      MasterUserPassword:
        Fn::Sub: "{{resolve:secretsmanager:${HoopDBSecret}::masterpassword}}"
      # MasterUsername: "hooadminuser"
      # MasterUserPassword: "mybigpassworda8s9a8912"
      PubliclyAccessible: false
      StorageEncrypted: true
      VPCSecurityGroups: [!GetAtt HoopDBSecurityGroup.GroupId]

  ####
  # Load Balancer
  ####
  AppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      # Name: hoopgateway
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: [!GetAtt AppLBSecurityGroup.GroupId]
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
  AppApiLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    # DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref AppApiTargetGroup
      LoadBalancerArn: !Ref AppLB
      Port: "443"
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref AwsCertificateArn
  AppGrpcLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    # DependsOn: AppLB
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref AppGrpcTargetGroup
      LoadBalancerArn: !Ref AppLB
      Port: "8443"
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref AwsCertificateArn
  AppApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Protocol: HTTP
      Port: 8009
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /api/healthz
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      # TODO: change-me
      # Name: GatewayApiTargetGroup
      VpcId: !Ref VPC
  AppGrpcTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: instance
      Protocol: HTTP
      ProtocolVersion: GRPC
      Port: 8010
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      # TODO: change-me
      # Name: GatewayGrpcTargetGroup
      VpcId: !Ref VPC

  ####
  # App Default Identity Provider
  ####
  IdpDefault:
    Type: AWS::Cognito::UserPool
    Properties:
      # MfaConfiguration: OFF
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      AdminCreateUserConfig:
         AllowAdminCreateUserOnly: true
      Schema:
      - Name: name
        Mutable: true
        DeveloperOnlyAttribute: false
        AttributeDataType: String
      UsernameAttributes:
      - email

  IdpDefaultClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref IdpDefault
      GenerateSecret: true
      CallbackURLs:
        - !Sub 'https://${APIPublicDNS}/api/callback'
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO

  IdpDefaultDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref IdpDefault
      Domain: !Ref AwsIdpDomain

  ####
  # App VM
  ####
  GatewayServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        PauseTime: PT15M
        WaitOnResourceSignals: true
    Properties:
      VPCZoneIdentifier:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2
      # AvailabilityZones: !Ref AZs
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      TargetGroupARNs:
      - !Ref AppGrpcTargetGroup
      - !Ref AppApiTargetGroup

  DefaultInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
      - PolicyName: SecretsManagerGetter
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Resource: !Ref HoopDBSecret
            Action:
            - secretsmanager:GetSecretValue
            - secretsmanager:DescribeSecret

  DefaultInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref DefaultInstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    # DependsOn: HoopDB
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt DefaultInstanceProfile.Arn
        InstanceType: !Ref AwsInstanceType
        SecurityGroupIds: [!GetAtt LaunchTemplateSecurityGroup.GroupId]
        KeyName: !Ref AwsKeyName
        ImageId: !Ref AwsLatestAmiId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y && yum install -y \
              aws-cfn-bootstrap \
              amazon-ssm-agent \
              https://github.com/microsoft/go-sqlcmd/releases/download/v1.6.0/sqlcmd-1.6.0-1.el7.x86_64.rpm
            cfn-init -v --stack ${AWS::StackId} --resource LaunchTemplate --region ${AWS::Region}
            cfn-signal -e $? --stack ${AWS::StackId} --resource GatewayServerGroup --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
          - setup_gateway
          - setup_system_agent
          # - verify_instance_health
        setup_gateway:
          packages:
            yum:
              jq: []
              postgresql15: []
              mariadb105: []
          files:
            # TODO: change to /etc/??
            /lib/systemd/system/hoopgateway.service:
              content: |
                [Unit]
                Description=Hoop Gateway
                After=network.target

                [Service]
                ExecStart=/opt/hoop/bin/hoop start gateway
                EnvironmentFile=/etc/hoopgateway.d/config
                Restart=on-failure
                RestartSec=15s

                [Install]
                WantedBy=multi-user.target
            /etc/hoopgateway.d/config:
              # Make LOG_LEVEL coerce to GODEBUG
              content: !Sub |
                LOG_LEVEL=${AppLogLevel}
                LOG_ENCODING=json
                API_URL=https://${APIPublicDNS}
                GRPC_URL=https://${APIPublicDNS}:8443
                POSTGRES_DB_URI=postgres://MASTER_DB_USER:MASTER_DB_PASSWORD@${HoopDB.Endpoint.Address}:${HoopDB.Endpoint.Port}/postgres
                IDP_ISSUER=${IdpDefault.ProviderURL}
                IDP_CLIENT_ID=${IdpDefaultClient.ClientId}
                IDP_CLIENT_SECRET=${IdpDefaultClient.ClientSecret}
                ADMIN_USERNAME=${AppAdminUsernameRole}
              mode: "000400"
              owner: root
              group: root
          commands:
            install_binaries:
              cwd: '~'
              command: !Sub |
                # TODO: transform to a installation script
                set -eox pipefail
                mkdir -p /opt/hoop/bin && mkdir -p /app/ui
                VERSION=$(curl -s https://releases.hoop.dev/release/latest.txt)
                # TODO: change me to get the migrations directly from the binary
                curl -sL https://hoopartifacts.s3.amazonaws.com/release/hoop-dev.tar.gz -o hoop_$VERSION.tar.gz
                tar --extract --file hoop_$VERSION.tar.gz -C /opt/hoop/bin && rm -f hoop_$VERSION.tar.gz
                chmod 0755 /opt/hoop/bin/hoop && chown root:root /opt/hoop/bin/hoop
                if [ ! -f /app/migrations/000001_init.up.sql ]; then
                  mv /opt/hoop/bin/migrations /app/migrations
                fi
                rm -rf mv /opt/hoop/bin/migrations || true
                /opt/hoop/bin/hoop version
                curl -sL https://github.com/PostgREST/postgrest/releases/download/v11.2.2/postgrest-v11.2.2-linux-static-x64.tar.xz -o postgrest.tar.xz
                tar -xf postgrest.tar.xz -C /usr/local/bin && rm -f postgrest.tar.xz
                chmod 0755 /usr/local/bin/postgrest && chown root:root /usr/local/bin/postgrest
                postgrest --version
                curl -sL https://hoopartifacts.s3.amazonaws.com/webapp/latest.tar.gz -o webapp-latest.tar.gz
                tar -xf webapp-latest.tar.gz && mv ./resources/public /app/ui/public && rm -f webapp-latest.tar.gz && rm -rf ./resources
                SECRET_JSON=$(aws secretsmanager get-secret-value \
                  --secret-id hoopdev/${AWS::StackName}/pgmaster \
                  --region ${AWS::Region} \
                  --query SecretString \
                  --output text | jq .)
                PGUSER=$(echo $SECRET_JSON | jq .masteruser -r)
                PGPWD=$(echo $SECRET_JSON | jq .masterpassword -r)
                if [[ -z $PGUSER || -z $PGPWD ]]; then
                  echo 'Unable to retrieve database credentials from AWS Secrets Manager'
                  exit 1
                fi
                sed "s|MASTER_DB_USER|$PGUSER|g;s|MASTER_DB_PASSWORD|$PGPWD|g" -i /etc/hoopgateway.d/config
        setup_system_agent:
          files:
            /opt/hoop/bin/run_system_agent.sh:
              # Make LOG_LEVEL coerce to GODEBUG
              content: |
                #!/bin/bash
                SECRET_KEY=xagt-$(LC_ALL=C tr -dc A-Za-z0-9_ < /dev/urandom | head -c 43 | xargs)
                set -eox pipefail
                SECRET_KEY_HASH=$(echo -n $SECRET_KEY | sha256sum |awk {'print $1'})
                psql -v ON_ERROR_STOP=1 "$POSTGRES_DB_URI" <<EOF
                BEGIN;
                DELETE FROM agents WHERE name = 'system';
                INSERT INTO agents (org_id, name, mode, key_hash, status)
                    VALUES ((SELECT id from private.orgs), 'system', 'standard', '$SECRET_KEY_HASH', 'DISCONNECTED')
                    ON CONFLICT DO NOTHING;
                COMMIT;
                EOF
                HOOP_KEY=grpc://system:$SECRET_KEY@127.0.0.1:8010?mode=standard /opt/hoop/bin/hoop start agent
              mode: "000755"
              owner: root
              group: root
            /etc/systemd/system/hoopagent.service:
              content: |
                [Unit]
                Description=Hoop System Agent
                After=network.target

                [Service]
                ExecStart=/opt/hoop/bin/run_system_agent.sh
                EnvironmentFile=/etc/hoopgateway.d/config
                Restart=on-failure
                RestartSec=15s

                [Install]
                WantedBy=multi-user.target
        # verify_instance_health:
        #   commands:
        #     ELBHealthCheck:
        #       command: !Sub |
        #         until [ "$state" == "\"InService\"" ];
        #         do state=$(aws --region ${AWS::Region} elb describe-instance-health --load-balancer-name ${AppLB} --instances $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --query InstanceStates[0].State); sleep 10;
        #         done
          services:
            systemd:
              amazon-ssm-agent:
                enabled: true
                ensureRunning: true
              hoopgateway:
                enabled: true
                ensureRunning: true
                files:
                - /etc/hoopgateaway.d/config
              hoopagent:
                enabled: true
                ensureRunning: true
                files:
                - /etc/hoopgateaway.d/config

  ####
  # EC2 Security Groups
  ####
  # TODO: add name to these resources!
  AppLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable ingress traffic for HTTP/GRPC on the inbound ports
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8443
        ToPort: 8443
        CidrIp: !Ref AppAccessLocation
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref AppAccessLocation

  LaunchTemplateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      guard:
        SuppressedRules:
          - INCOMING_SSH_DISABLED
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access and HTTP/GRPC on the inbound port
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8009
        ToPort: 8009
        # CidrIp: 0.0.0.0/0
        SourceSecurityGroupId: !Ref AppLBSecurityGroup
      - IpProtocol: tcp
        FromPort: 8010
        ToPort: 8010
        # CidrIp: 0.0.0.0/0
        SourceSecurityGroupId: !Ref AppLBSecurityGroup

  HoopDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow postgres inbound traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LaunchTemplateSecurityGroup
Outputs:
  URL:
    Description: DNS of the app
    Value: !Sub "${AppLB.DNSName}"

  HoopDBEndpoint:
    Description: "Connection endpoint for the database"
    Value: !GetAtt HoopDB.Endpoint.Address