name: Hoop Release

on:
  push:
    branches:
      - build-darwin
#    tags:
#      - "*.*.*"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout Hoop
        uses: actions/checkout@v3

      - name: Checkout libhoop
        uses: actions/checkout@v3
        with:
          repository: hoophq/libhoop
          path: "./libhoop"
          token: ${{ secrets.GH_TOKEN }}
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ">=1.23.8"
      - name: Test
        run: make test

  build-rust-binaries-darwin:
    runs-on: macos-latest
    name: Build Darwin Rust Binaries
    environment: production
    needs: [test]

    steps:
      - name: Checkout Hoop
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Add Darwin Rust targets
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin

      - name: Set Git Tag
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build Darwin Rust Binaries
        env:
          GIT_TAG: ${{ env.GIT_TAG }}
        run: make build-rust-darwin-all

      - uses: actions/upload-artifact@v4
        with:
          name: rust-binaries-darwin
          path: dist/binaries/

  build-rust-binaries-linux:
    runs-on: ubuntu-latest
    name: Build Linux Rust Binaries
    environment: production
    needs: [test]

    steps:
      - name: Checkout Hoop
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          override: true

      - name: Add Linux Rust targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Set Git Tag
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build Linux Rust Binaries
        env:
          GIT_TAG: ${{ env.GIT_TAG }}
        run: make build-rust-linux-all

      - uses: actions/upload-artifact@v4
        with:
          name: rust-binaries-linux
          path: dist/binaries/

  darwin-amd64:
    runs-on: ubuntu-latest
    name: Build Darwin Amd64
    environment: production
    needs: [test]

    steps:
      - name: Checkout Hoop
        uses: actions/checkout@v3

      - name: Checkout libhoop
        uses: actions/checkout@v3
        with:
          repository: hoophq/libhoop
          path: "./libhoop"
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.23.8"
          cache-dependency-path: "**/go.sum"

      - name: Set Git Tag
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: amd64
        env:
          GIT_TAG: ${{ env.GIT_TAG }}
        run: GOOS=darwin GOARCH=amd64 make build-go

      - uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts-${{ github.job }}
          path: dist/binaries/darwin_amd64/

  darwin-arm64:
    runs-on: ubuntu-latest
    name: Build Darwin Arm64
    environment: production
    needs: [test]

    steps:
      - name: Checkout Hoop
        uses: actions/checkout@v3

      - name: Checkout libhoop
        uses: actions/checkout@v3
        with:
          repository: hoophq/libhoop
          path: "./libhoop"
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.23.8"
          cache-dependency-path: "**/go.sum"

      - name: Set Git Tag
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build
        env:
          GIT_TAG: ${{ env.GIT_TAG }}
        run: GOOS=darwin GOARCH=arm64 make build-go

      - uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts-${{ github.job }}
          path: dist/binaries/darwin_arm64/

  windows-amd64:
    runs-on: ubuntu-latest
    name: Build Windows Amd64
    environment: production
    needs: [test]

    steps:
      - name: Checkout Hoop
        uses: actions/checkout@v3

      - name: Checkout libhoop
        uses: actions/checkout@v3
        with:
          repository: hoophq/libhoop
          path: "./libhoop"
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.23.8"
          cache-dependency-path: "**/go.sum"

      - name: Set Git Tag
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build
        env:
          GIT_TAG: ${{ env.GIT_TAG }}
        run: GOOS=windows GOARCH=amd64 make build-go

      - uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts-${{ github.job }}
          path: dist/binaries/windows_amd64/

  windows-arm64:
    runs-on: ubuntu-latest
    name: Build Windows Arm64
    environment: production
    needs: [test]

    steps:
      - name: Checkout Hoop
        uses: actions/checkout@v3

      - name: Checkout libhoop
        uses: actions/checkout@v3
        with:
          repository: hoophq/libhoop
          path: "./libhoop"
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.23.8"
          cache-dependency-path: "**/go.sum"

      - name: Set Git Tag
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build
        env:
          GIT_TAG: ${{ env.GIT_TAG }}
        run: GOOS=windows GOARCH=arm64 make build-go

      - uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts-${{ github.job }}
          path: dist/binaries/windows_arm64/

  linux-amd64:
    runs-on: ubuntu-latest
    name: Build Linux Amd64
    environment: production
    needs: [test]

    steps:
      - name: Checkout Hoop
        uses: actions/checkout@v3

      - name: Checkout libhoop
        uses: actions/checkout@v3
        with:
          repository: hoophq/libhoop
          path: "./libhoop"
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.23.8"
          cache-dependency-path: "**/go.sum"

      - name: Set Git Tag
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build
        env:
          GIT_TAG: ${{ env.GIT_TAG }}
          HONEYCOMB_API_KEY: ${{ secrets.HONEYCOMB_API_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SEGMENT_API_KEY: ${{ secrets.SEGMENT_API_KEY }}
          INTERCOM_HMAC_KEY: ${{ secrets.INTERCOM_HMAC_KEY }}
        run: GOOS=linux GOARCH=amd64 make build-go

      - uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts-${{ github.job }}
          path: dist/binaries/linux_amd64/

  linux-arm64:
    runs-on: ubuntu-latest
    name: Build Linux Arm64
    environment: production
    needs: [test]

    steps:
      - name: Checkout Hoop
        uses: actions/checkout@v3

      - name: Checkout libhoop
        uses: actions/checkout@v3
        with:
          repository: hoophq/libhoop
          path: "./libhoop"
          token: ${{ secrets.GH_TOKEN }}

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ">=1.23.8"
          cache-dependency-path: "**/go.sum"

      - name: Set Git Tag
        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build
        env:
          GIT_TAG: ${{ env.GIT_TAG }}
          HONEYCOMB_API_KEY: ${{ secrets.HONEYCOMB_API_KEY }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SEGMENT_API_KEY: ${{ secrets.SEGMENT_API_KEY }}
          INTERCOM_HMAC_KEY: ${{ secrets.INTERCOM_HMAC_KEY }}
        run: GOOS=linux GOARCH=arm64 make build-go

      - uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts-${{ github.job }}
          path: dist/binaries/linux_arm64/

  build-webapp:
    runs-on: ubuntu-latest
    name: Build Webapp
    environment: production
    needs: [test]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "21"
      - name: Install clojure tools
        uses: DeLaGuardo/setup-clojure@12.5
        with:
          cli: 1.12.0.1479 # releases: https://clojure.org/releases/tools
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: webapp/package-lock.json
      - name: Build
        run: make build-webapp
      - uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts-${{ github.job }}
          path: dist/

  build-tar-files:
    runs-on: ubuntu-latest
    name: Build Tar Files
    environment: production
    needs: [test, darwin-amd64, darwin-arm64, windows-amd64, windows-arm64, linux-amd64, linux-arm64, build-webapp, build-rust-binaries-darwin, build-rust-binaries-linux]
    steps:
      - name: Checkout Hoop
        uses: actions/checkout@v3
        
      - name: Download Darwin AMD64
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts-darwin-amd64
          path: dist/binaries/darwin_amd64/
          
      - name: Download Darwin ARM64
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts-darwin-arm64
          path: dist/binaries/darwin_arm64/
          
      - name: Download Windows AMD64
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts-windows-amd64
          path: dist/binaries/windows_amd64/
          
      - name: Download Windows ARM64
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts-windows-arm64
          path: dist/binaries/windows_arm64/
          
      - name: Download Linux AMD64
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts-linux-amd64
          path: dist/binaries/linux_amd64/
          
      - name: Download Linux ARM64
        uses: actions/download-artifact@v4
        with:
          name: dist-artifacts-linux-arm64
          path: dist/binaries/linux_arm64/
          
      - name: Download Rust Binaries Darwin
        uses: actions/download-artifact@v4
        with:
          name: rust-binaries-darwin
          path: dist/binaries/
          
      - name: Download Rust Binaries Linux
        uses: actions/download-artifact@v4
        with:
          name: rust-binaries-linux
          path: dist/binaries/
          
      - name: Copy Rust Binaries to Architecture Directories
        run: |
          # Copy Darwin Rust binaries to their respective architecture directories
          cp dist/binaries/darwin_amd64/hoop_rs dist/binaries/darwin_amd64/ 2>/dev/null || true
          cp dist/binaries/darwin_arm64/hoop_rs dist/binaries/darwin_arm64/ 2>/dev/null || true
          
          # Copy Linux Rust binaries to their respective architecture directories  
          cp dist/binaries/linux_amd64/hoop_rs dist/binaries/linux_amd64/ 2>/dev/null || true
          cp dist/binaries/linux_arm64/hoop_rs dist/binaries/linux_arm64/ 2>/dev/null || true
          
      - name: Build Tar Files for All Architectures
        run: |
          # Create tar.gz for Darwin AMD64
          GOOS=darwin GOARCH=amd64 make build-tar-files
          
          # Create tar.gz for Darwin ARM64
          GOOS=darwin GOARCH=arm64 make build-tar-files
          
          # Create tar.gz for Windows AMD64
          GOOS=windows GOARCH=amd64 make build-tar-files
          
          # Create tar.gz for Windows ARM64
          GOOS=windows GOARCH=arm64 make build-tar-files
          
          # Create tar.gz for Linux AMD64
          GOOS=linux GOARCH=amd64 make build-tar-files
          
          # Create tar.gz for Linux ARM64
          GOOS=linux GOARCH=arm64 make build-tar-files
        
      - uses: actions/upload-artifact@v4
        with:
          name: dist-artifacts-${{ github.job }}
          path: dist/

  # docker-publish:
  #   runs-on: ubuntu-latest
  #   name: Docker Publish
  #   environment: production
  #   needs:
  #     - darwin-amd64
  #     - darwin-arm64
  #     - windows-amd64
  #     - windows-arm64
  #     - linux-amd64
  #     - linux-arm64
  #     - build-webapp
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: hoophq/hoop
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_LOGIN }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - uses: actions/download-artifact@v4
  #       with:
  #         pattern: dist-artifacts-*
  #         merge-multiple: true
  #         path: dist/
  #     - name: Extract Webapp
  #       run: make extract-webapp
  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         platforms: linux/amd64
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  # docker-publish-agent:
  #   runs-on: ubuntu-latest
  #   name: Docker Publish Agent
  #   environment: production
  #   needs:
  #     - darwin-amd64
  #     - darwin-arm64
  #     - windows-amd64
  #     - windows-arm64
  #     - linux-amd64
  #     - linux-arm64
  #     - build-webapp
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: hoophq/hoopdev
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_LOGIN }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - uses: actions/download-artifact@v4
  #       with:
  #         pattern: dist-artifacts-*
  #         merge-multiple: true
  #         path: dist/
  #     - name: Build and Push
  #       uses: docker/build-push-action@v4
  #       with:
  #         file: ./Dockerfile.dev
  #         context: .
  #         platforms: linux/amd64
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

#  docker-publish-hoopgateway-arm64:
#    runs-on: GitHub-Linux-Arm-Runner
#    name: Dck Publish Gateway (arm64)
#    environment: production
#    needs:
#      - darwin-amd64
#      - darwin-arm64
#      - windows-amd64
#      - windows-arm64
#      - linux-amd64
#      - linux-arm64
#      - build-webapp
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: hoophq/hoop
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_LOGIN }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - uses: actions/download-artifact@v4
#        with:
#          pattern: dist-artifacts-*
#          merge-multiple: true
#          path: dist/
#      - name: Extract Webapp
#        run: make extract-webapp
#      - name: Build and Push
#        uses: docker/build-push-action@v4
#        with:
#          file: ./Dockerfile
#          context: '.'
#          platforms: linux/arm64
#          provenance: false
#          sbom: false
#          push: true
#          tags: |
#            hoophq/hoop:${{ github.sha }}-arm64
#
#  docker-publish-hoopgateway-amd64:
#    runs-on: ubuntu-latest
#    name: Dck Publish Gateway (amd64)
#    environment: production
#    needs:
#      - darwin-amd64
#      - darwin-arm64
#      - windows-amd64
#      - windows-arm64
#      - linux-amd64
#      - linux-arm64
#      - build-webapp
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: hoophq/hoop
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_LOGIN }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - uses: actions/download-artifact@v4
#        with:
#          pattern: dist-artifacts-*
#          merge-multiple: true
#          path: dist/
#      - name: Extract Webapp
#        run: make extract-webapp
#      - name: Build and push
#        uses: docker/build-push-action@v4
#        with:
#          file: ./Dockerfile
#          context: '.'
#          platforms: linux/amd64
#          provenance: false
#          sbom: false
#          push: true
#          tags: |
#            hoophq/hoop:${{ github.sha }}-amd64
#
#  docker-publish-hoopgateway-multiarch:
#    runs-on: ubuntu-latest
#    name: Publish Gateway Image
#    environment: production
#    needs:
#      - docker-publish-hoopgateway-amd64
#      - docker-publish-hoopgateway-arm64
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: hoophq/hoop
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_LOGIN }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Set Git Tag
#        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - name: Create SHA manifest and push
#        env:
#          GIT_TAG: ${{ env.GIT_TAG }}
#        run: |
#          docker manifest create hoophq/hoop:${{ env.GIT_TAG }} \
#            --amend hoophq/hoop:${{ github.sha }}-amd64 \
#            --amend hoophq/hoop:${{ github.sha }}-arm64
#          docker manifest create hoophq/hoop:latest \
#            --amend hoophq/hoop:${{ github.sha }}-amd64 \
#            --amend hoophq/hoop:${{ github.sha }}-arm64
#          docker manifest push hoophq/hoop:${{ env.GIT_TAG }}
#          docker manifest push hoophq/hoop:latest
#
#
#  docker-publish-hoopagent-arm64:
#    runs-on: GitHub-Linux-Arm-Runner
#    name: Dck Publish Agent (arm64)
#    environment: production
#    needs:
#      - darwin-amd64
#      - darwin-arm64
#      - windows-amd64
#      - windows-arm64
#      - linux-amd64
#      - linux-arm64
#      - build-webapp
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: hoophq/hoopdev
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_LOGIN }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - uses: actions/download-artifact@v4
#        with:
#          pattern: dist-artifacts-*
#          merge-multiple: true
#          path: dist/
#      - name: Build and Push
#        uses: docker/build-push-action@v4
#        with:
#          file: ./Dockerfile.dev
#          context: '.'
#          platforms: linux/arm64
#          provenance: false
#          sbom: false
#          push: true
#          tags: |
#            hoophq/hoopdev:${{ github.sha }}-arm64
#
#  docker-publish-hoopagent-amd64:
#    runs-on: ubuntu-latest
#    name: Dck Publish Agent (amd64)
#    environment: production
#    needs:
#      - darwin-amd64
#      - darwin-arm64
#      - windows-amd64
#      - windows-arm64
#      - linux-amd64
#      - linux-arm64
#      - build-webapp
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: hoophq/hoopdev
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_LOGIN }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - uses: actions/download-artifact@v4
#        with:
#          pattern: dist-artifacts-*
#          merge-multiple: true
#          path: dist/
#      - name: Build and push
#        uses: docker/build-push-action@v4
#        with:
#          file: ./Dockerfile.dev
#          context: '.'
#          platforms: linux/amd64
#          provenance: false
#          sbom: false
#          push: true
#          tags: |
#            hoophq/hoopdev:${{ github.sha }}-amd64
#
#  docker-publish-hoopagent-multiarch:
#    runs-on: ubuntu-latest
#    name: Publish Hoopagent Image
#    environment: production
#    needs:
#      - docker-publish-hoopagent-amd64
#      - docker-publish-hoopagent-arm64
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: hoophq/hoopdev
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_LOGIN }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Set Git Tag
#        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - name: Create SHA manifest and push
#        env:
#          GIT_TAG: ${{ env.GIT_TAG }}
#        run: |
#          docker manifest create hoophq/hoopdev:${{ env.GIT_TAG }} \
#            --amend hoophq/hoopdev:${{ github.sha }}-amd64 \
#            --amend hoophq/hoopdev:${{ github.sha }}-arm64
#          docker manifest create hoophq/hoopdev:latest \
#            --amend hoophq/hoopdev:${{ github.sha }}-amd64 \
#            --amend hoophq/hoopdev:${{ github.sha }}-arm64
#          docker manifest push hoophq/hoopdev:${{ env.GIT_TAG }}
#          docker manifest push hoophq/hoopdev:latest
#
#
#  docker-publish-hooplabs-arm64:
#    runs-on: GitHub-Linux-Arm-Runner
#    name: Dck Publish Labs (arm64)
#    environment: production
#    needs:
#      - darwin-amd64
#      - darwin-arm64
#      - windows-amd64
#      - windows-arm64
#      - linux-amd64
#      - linux-arm64
#      - build-webapp
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: hoophq/hooplabs
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_LOGIN }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - uses: actions/download-artifact@v4
#        with:
#          pattern: dist-artifacts-*
#          merge-multiple: true
#          path: dist/
#      - name: Extract Webapp
#        run: make extract-webapp
#      - name: Set Git Tag
#        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - name: Build Gateway Bundle
#        env:
#          GIT_TAG: ${{ env.GIT_TAG }}
#          GOARCH: arm64
#        run: make build-gateway-bundle && mv ./dist ./deploy/docker-compose/dist
#      - name: Build and push
#        uses: docker/build-push-action@v4
#        with:
#          file: deploy/docker-compose/Dockerfile
#          context: deploy/docker-compose
#          platforms: linux/arm64
#          provenance: false
#          sbom: false
#          push: true
#          tags: |
#            hoophq/hooplabs:${{ github.sha }}-arm64
#
#  docker-publish-hooplabs-amd64:
#    runs-on: ubuntu-latest
#    name: Dck Publish Labs (amd64)
#    environment: production
#    needs:
#      - darwin-amd64
#      - darwin-arm64
#      - windows-amd64
#      - windows-arm64
#      - linux-amd64
#      - linux-arm64
#      - build-webapp
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: hoophq/hooplabs
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_LOGIN }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - uses: actions/download-artifact@v4
#        with:
#          pattern: dist-artifacts-*
#          merge-multiple: true
#          path: dist/
#      - name: Extract Webapp
#        run: make extract-webapp
#      - name: Set Git Tag
#        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - name: Build Gateway Bundle
#        env:
#          GIT_TAG: ${{ env.GIT_TAG }}
#          GOARCH: amd64
#        run: make build-gateway-bundle && mv ./dist ./deploy/docker-compose/dist
#      - name: Build and push
#        uses: docker/build-push-action@v4
#        with:
#          file: deploy/docker-compose/Dockerfile
#          context: deploy/docker-compose
#          platforms: linux/amd64
#          provenance: false
#          sbom: false
#          push: true
#          tags: |
#            hoophq/hooplabs:${{ github.sha }}-amd64
#
#  docker-publish-multiarch:
#    runs-on: ubuntu-latest
#    name: Publish Labs Image
#    environment: production
#    needs:
#      - docker-publish-hooplabs-amd64
#      - docker-publish-hooplabs-arm64
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#      - name: Docker meta
#        id: meta
#        uses: docker/metadata-action@v4
#        with:
#          images: hoophq/hooplabs
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_LOGIN }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Set Git Tag
#        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#      - name: Create SHA manifest and push
#        env:
#          GIT_TAG: ${{ env.GIT_TAG }}
#        run: |
#          docker manifest create hoophq/hooplabs:${{ env.GIT_TAG }} \
#            --amend hoophq/hooplabs:${{ github.sha }}-amd64 \
#            --amend hoophq/hooplabs:${{ github.sha }}-arm64
#          docker manifest create hoophq/hooplabs:latest \
#            --amend hoophq/hooplabs:${{ github.sha }}-amd64 \
#            --amend hoophq/hooplabs:${{ github.sha }}-arm64
#          docker manifest push hoophq/hooplabs:${{ env.GIT_TAG }}
#          docker manifest push hoophq/hooplabs:latest

#  publish-release:
#    runs-on: ubuntu-latest
#    name: Publish Release
#    environment: production
#    needs:
#      - docker-publish-multiarch
#      - docker-publish-hoopgateway-multiarch
#      - docker-publish-hoopagent-multiarch
#
#    steps:
#      - name: Checkout Hoop
#        uses: actions/checkout@v3
#
#      - uses: actions/download-artifact@v4
#        id: download
#        with:
#          pattern: dist-artifacts-*
#          merge-multiple: true
#          path: dist/
#
#      - uses: matbour/setup-sentry-cli@v2
#        id: sentry-cli
#
#      - name: Set Git Tag
#        run: echo "GIT_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
#
#      - name: Build Gateway Bundle (amd64)
#        env:
#          GIT_TAG: ${{ env.GIT_TAG }}
#          GOARCH: amd64
#        run: make build-gateway-bundle
#
#      - name: Build Gateway Bundle (arm64)
#        env:
#          GIT_TAG: ${{ env.GIT_TAG }}
#          GOARCH: arm64
#        run: make build-gateway-bundle
#
#      - name: Build Helm Chart
#        env:
#          GIT_TAG: ${{ env.GIT_TAG }}
#          GITHUB_CONTAINER_REGISTRY_TOKEN: ${{ secrets.GH_CONTAINER_REGISTRY_TOKEN }}
#          GITHUB_USERNAME: ${{ github.actor }}
#        run: make build-helm-chart
#
#      - name: Publish Release
#        env:
#          GIT_TAG: ${{ env.GIT_TAG }}
#          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#          AWS_REGION: us-east-1
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#        run: make release

      #- name: Publish Brew Recipe
      #  run: gh workflow run release.yml -f version=$GIT_TAG --repo hoophq/brew
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      #    GIT_TAG: ${{ env.GIT_TAG }}

      #- name: Publish Sentry Sourcemaps
      #  run: make publish-sentry-sourcemaps
      #  env:
      #    SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
