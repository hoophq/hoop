FROM ubuntu:noble-20250714

ENV DEBIAN_FRONTEND=noninteractive
ENV ACCEPT_EULA=y
ARG AWS_CLI_VERSION=2.28.6
ARG GCLOUD_VERSION=533.0.0-0
ARG GCLOUD_GKE_AUTHN_PLUGIN_VERSION=467.0.0-0
ARG NODE_VERSION=22.18.0

# Common
RUN mkdir -p /app && \
    apt update -y && \
    apt install -y \
    python3-dev \
    python3-pip \
    python3.12 \
    locales \
    tini \
    apt-utils \
    curl \
    gnupg \
    gnupg2 \
    net-tools \
    netcat-openbsd \
    groff \
    jq \
    openssh-client \
    unzip \
    expect \
    less \
    gettext-base \
    lsb-release \
    alien \
    libaio1t64 \
    elfutils \
    libelf-dev \
    bc \
    wget \
    redis-tools && \
    ln -s /usr/bin/python3 /usr/bin/python

# https://github.com/nodejs/release-keys
RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
    amd64) ARCH='x64';; \
    ppc64el) ARCH='ppc64le';; \
    s390x) ARCH='s390x';; \
    arm64) ARCH='arm64';; \
    armhf) ARCH='armv7l';; \
    i386) ARCH='x86';; \
    *) echo "unsupported architecture"; exit 1 ;; \
    esac \
    && export GNUPGHOME="$(mktemp -d)" \
    && set -ex \
    && for key in \
    5BE8A3F6C8A5C01D106C0AD820B1A390B168D356 \
    4ED778F539E3634C779C87C6D7062848A1AB005C \
    141F07595B7B3FFE74309A937405533BE57C7D57 \
    74F12602B6F1C4E913FAA37AD3A89613643B6201 \
    DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7 \
    61FC681DFB92A079F1685E77973F295594EC4689 \
    8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600 \
    C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8 \
    890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4 \
    C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93C \
    108F52B48DB57BB0CC439B2997B01419BD92F80A \
    A363A499291CBBC940DD62E41F10027AF002F8B0 \
    CC68F5A3106FF448322E48ED27F5E38D5B0A215F \
    ; do \
    gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$key" || \
    gpg --batch --keyserver keyserver.ubuntu.com --recv-keys "$key" ; \
    done \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-$ARCH.tar.xz" \
    && curl -fsSLO --compressed "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \
    && gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \
    && gpgconf --kill all \
    && rm -rf "$GNUPGHOME" \
    && grep " node-v$NODE_VERSION-linux-$ARCH.tar.xz\$" SHASUMS256.txt | sha256sum -c - \
    && tar -xJf "node-v$NODE_VERSION-linux-$ARCH.tar.xz" -C /usr/local --strip-components=1 --no-same-owner \
    && rm "node-v$NODE_VERSION-linux-$ARCH.tar.xz" SHASUMS256.txt.asc SHASUMS256.txt \
    && ln -s /usr/local/bin/node /usr/local/bin/nodejs \
    && node --version \
    && npm --version

RUN curl -sL "https://dl.k8s.io/release/v1.29.15/bin/linux/$(dpkg --print-architecture)/kubectl" -o kubectl && \
  chmod 755 kubectl && \
  mv kubectl /usr/local/bin/kubectl

RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
  && case "${dpkgArch##*-}" in \
  amd64) ARCH='x86_64';; \
  arm64) ARCH='aarch64';; \
  *) echo "unsupported architecture"; exit 1 ;; \
  esac \
  && curl -sL "https://awscli.amazonaws.com/awscli-exe-linux-$ARCH.zip" -o awscli-exe-linux.zip && \
    unzip -q awscli-exe-linux.zip && \
    aws/install && \
    aws --version

RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
  && case "${dpkgArch##*-}" in \
  amd64) ARCH='ubuntu_64bit';; \
  arm64) ARCH='ubuntu_arm64';; \
  *) echo "unsupported architecture"; exit 1 ;; \
  esac \
  && curl -sL "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/$ARCH/session-manager-plugin.deb" -o session-manager-plugin.deb && \
    dpkg -i session-manager-plugin.deb

RUN LIBSSL_1_1_REPO= && dpkgArch="$(dpkg --print-architecture)" \
  && case "${dpkgArch##*-}" in \
  amd64) LIBSSL_1_1_REPO='deb http://security.ubuntu.com/ubuntu focal-security main';; \
  arm64) LIBSSL_1_1_REPO='deb http://ports.ubuntu.com/ubuntu-ports focal-security main';; \
  *) echo "unsupported architecture"; exit 1 ;; \
  esac \
  && echo $LIBSSL_1_1_REPO | tee /etc/apt/sources.list.d/focal-security.list && \
    wget -qO- https://www.mongodb.org/static/pgp/server-8.0.asc | tee /etc/apt/trusted.gpg.d/server-8.0.asc && \
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list && \
    echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu noble/mongodb-org/8.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-8.0.list && \
    curl -sL https://packages.microsoft.com/keys/microsoft.asc | apt-key add - && \
    curl -sL https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

# legacy mongo client
RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
  && case "${dpkgArch##*-}" in \
  amd64) ARCH='x86_64';; \
  arm64) ARCH='aarch64';; \
  *) echo "unsupported architecture"; exit 1 ;; \
  esac \
  && curl -fsSLO --compressed https://fastdl.mongodb.org/linux/mongodb-linux-$ARCH-ubuntu2004-5.0.31.tgz && \
  apt update -y && apt install libssl1.1 -y && \
    tar -xzf mongodb-linux-$ARCH-ubuntu2004-5.0.31.tgz && \
    mv mongodb-linux-$ARCH-ubuntu2004-5.0.31/bin/mongo /usr/local/bin/mongo && \
    rm mongodb-linux-$ARCH-ubuntu2004-5.0.31.tgz && \
    mongo --version

RUN apt update -y && apt install -y \
    mongodb-mongosh=2.5.6 \
    mongodb-org-tools=8.0.12 \
    default-mysql-client=1.1.0build1 \
    unixodbc-dev=2.3.12-1ubuntu0.24.04.1 \
    postgresql-client-16=16.9-0ubuntu0.24.04.1 \
    google-cloud-cli=$GCLOUD_VERSION \
    google-cloud-sdk-gke-gcloud-auth-plugin=$GCLOUD_GKE_AUTHN_PLUGIN_VERSION && \
        curl -fsSLO --compressed https://packages.microsoft.com/ubuntu/22.04/prod/pool/main/s/sqlcmd/sqlcmd_1.5.0-1_jammy_all.deb && \
        dpkg -i sqlcmd_1.5.0-1_jammy_all.deb && \
        rm sqlcmd_1.5.0-1_jammy_all.deb && \
        rm -rf /var/lib/apt/lists/*

# configure libaio symlink for oracle client
RUN ARCH= && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
    amd64) ln -s /usr/lib/x86_64-linux-gnu/libaio.so.1t64 /usr/lib/x86_64-linux-gnu/libaio.so.1;; \
    arm64) ln -s /usr/lib/aarch64-linux-gnu/libaio.so.1t64 /usr/lib/aarch64-linux-gnu/libaio.so.1;; \
    *) echo "unsupported architecture"; exit 1 ;; \
    esac

# Download and install Oracle Instant Client and SQL*Plus
RUN URL_ORACLE_BASIC= && URL_ORACLE_SQLPLUS= && dpkgArch="$(dpkg --print-architecture)" \
    && case "${dpkgArch##*-}" in \
    amd64) URL_ORACLE_BASIC='https://download.oracle.com/otn_software/linux/instantclient/2390000/instantclient-basic-linux.x64-23.9.0.25.07.zip';; \
    arm64) URL_ORACLE_BASIC='https://download.oracle.com/otn_software/linux/instantclient/instantclient-basic-linux-arm64.zip';; \
    *) echo "unsupported architecture"; exit 1 ;; \
    esac \
    && case "${dpkgArch##*-}" in \
    amd64) URL_ORACLE_SQLPLUS='https://download.oracle.com/otn_software/linux/instantclient/2390000/instantclient-sqlplus-linux.x64-23.9.0.25.07.zip';; \
    arm64) URL_ORACLE_SQLPLUS='https://download.oracle.com/otn_software/linux/instantclient/instantclient-sqlplus-linux-arm64.zip';; \
    *) echo "unsupported architecture"; exit 1 ;; \
    esac \
    && mkdir -p /opt/oracle && \
    cd /opt/oracle && \
    wget -O instantclient-basic-linux.zip $URL_ORACLE_BASIC && \
    wget -O instantclient-sqlplus-linux.zip $URL_ORACLE_SQLPLUS && \
    unzip instantclient-basic-linux.zip && rm -rf META-INF && \
    unzip instantclient-sqlplus-linux.zip && rm instantclient-basic-linux.zip && rm instantclient-sqlplus-linux.zip && \
    echo 'set markup csv on delimiter "\t" quote off\nset heading on echo off termout off\nset feedback off trimspool on' >> /opt/oracle/instantclient_23_9/glogin.sql && \
    LD_LIBRARY_PATH=/opt/oracle/instantclient_23_9 /opt/oracle/instantclient_23_9/sqlplus -V && \
    cd /

# Configure environment variables
ENV PATH="/opt/oracle/instantclient_23_9:$PATH"
ENV LD_LIBRARY_PATH="/opt/oracle/instantclient_23_9"

RUN pip3 install -U \
    boto3==1.40.6 \
    requests==2.32.4 \
    --break-system-packages

RUN sed -i '/en_US.UTF-8/s/^# //g' /etc/locale.gen && \
    locale-gen
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8
ENV NODE_PATH=/usr/local/lib/node_modules/

ENV PATH="/app:${PATH}"

ENTRYPOINT ["tini", "--"]
