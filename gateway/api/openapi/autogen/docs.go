// Package autogen Code generated by swaggo/swag. DO NOT EDIT
package autogen

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://hoop.dev/docs/legal/tos",
        "contact": {
            "name": "Help",
            "url": "https://help.hoop.dev",
            "email": "help@hoop.dev"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/license/mit"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/agents": {
            "get": {
                "description": "List all agent keys",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "List Agent Keys",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/openapi.AgentListResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create an agent key in a DSN format: ` + "`" + `grpc(s)://\u003cname\u003e:\u003ckey\u003e@\u003cgrpc-host\u003e:\u003cgrpc-port\u003e?mode=standard|embedded` + "`" + `.\nThis key is used to deploy agents and expose internal resources from your infra-structure",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Create Agent Key",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.AgentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/openapi.AgentCreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/agents/{nameOrID}": {
            "delete": {
                "description": "Remove an agent key. It will invalidate a running agent",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Delete Agent Key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name or ID of the resource",
                        "name": "nameOrID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/callback": {
            "get": {
                "description": "Exchanges and validates the authorization code for an access token after being redirect by the external provider.\nA success authentication will redirect the user back to the default redirect url provided in the /login route.\n\nIn case of error it will include the query string ` + "`" + `error=unexpected_error` + "`" + ` when redirecting.\n",
                "tags": [
                    "Authentication"
                ],
                "summary": "Login Callback",
                "parameters": [
                    {
                        "type": "string",
                        "format": "string",
                        "description": "The error description in case of failure to authenticate",
                        "name": "error",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "string",
                        "description": "The state value (Oauth2)",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "string",
                        "description": "The authorization code (Oauth2)",
                        "name": "code",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.Login"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/connections": {
            "get": {
                "description": "List all connections.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "List Connections",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Filter by agent id",
                        "name": "agent_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "string",
                        "description": "Filter by tags, separated by comma",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "string",
                        "description": "Filter by type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "string",
                        "description": "Filter by subtype",
                        "name": "subtype",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "string",
                        "description": "Filter by managed by",
                        "name": "managed_by",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/openapi.Connection"
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "The connection resource allows exposing internal services from your internal infra structure to users.\n\n### Types of Connections\n\nThe definition of this resource represent how clients will be able to interact with internal resources.\n\nEach type/subtype may represent a distinct implementation:\n\n- ` + "`" + `application/\u003csubtype\u003e` + "`" + ` - An alias to map distinct types of shell applications (e.g.: python, ruby, etc)\n- ` + "`" + `application/tcp` + "`" + ` - Forward TCP connections\n\n    This type requires the following environment variables:\n    - ` + "`" + `HOST` + "`" + `: ip or dns of the internal service\n    - ` + "`" + `PORT` + "`" + `: the port of the internal service\n\n- ` + "`" + `custom` + "`" + ` - Any custom shell application\n- ` + "`" + `database/\u003csubtype\u003e` + "`" + ` - Allow connecting to databases through multiple clients (Webapp, cli, IDE's)\n\nEach ` + "`" + `\u003csubtype\u003e` + "`" + ` has distinct environment variables that are allowed to be configured, refer to our [documentation](https://hoop.dev/docs) for more information.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Create Connection",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.Connection"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/openapi.Connection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/connections/{nameOrID}": {
            "get": {
                "description": "Get resource by name or id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name or UUID of the connection",
                        "name": "nameOrID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.Connection"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a connection resource.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Update Connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name or ID of the resource",
                        "name": "nameOrID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.Connection"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.Connection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/connections/{nameOrID}/databases": {
            "get": {
                "description": "List all available databases for a database connection",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "List Databases",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name or UUID of the connection",
                        "name": "nameOrID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.ConnectionDatabaseListResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/connections/{nameOrID}/schemas": {
            "get": {
                "description": "Get detailed schema information including tables, views, columns and indexes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Database Schema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name or UUID of the connection",
                        "name": "nameOrID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the database",
                        "name": "database",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.ConnectionSchemaResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/connections/{name}": {
            "delete": {
                "description": "Delete a connection resource.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Delete Connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the resource",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/features/ask-ai/v1/chat/completions": {
            "post": {
                "description": "Proxy to OpenAI chat completions ` + "`" + `/vi/chat/completions` + "`" + `",
                "tags": [
                    "Features"
                ],
                "summary": "OpenAI Chat Completions",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/guardrails": {
            "get": {
                "description": "List Guard Rail Rules",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "List Guard Rail Rules",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/openapi.GuardRailRuleResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create Guard Rail Rules",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Create Guard Rail Rules",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.GuardRailRuleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/openapi.GuardRailRuleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/guardrails/{id}": {
            "get": {
                "description": "Get Guard Rail Rules",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Guard Rail Rules",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique identifier of the resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.GuardRailRuleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update Guard Rail Rules",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Update Guard Rail Rules",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.GuardRailRuleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.GuardRailRuleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a Guard Rail Rule resource.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Delete a Rule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The unique identifier of the resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Reports if the service is working properly",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server Management"
                ],
                "summary": "HealthCheck",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.LivenessCheck"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.LivenessCheck"
                        }
                    }
                }
            }
        },
        "/integrations/jira": {
            "get": {
                "description": "Get Jira integration for the organization",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jira"
                ],
                "summary": "Get Jira Integration",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.JiraIntegration"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the Jira integration for the organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jira"
                ],
                "summary": "Update Jira Integration",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.JiraIntegration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.JiraIntegration"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Jira integration for the organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jira"
                ],
                "summary": "Create Jira Integration",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.JiraIntegration"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/openapi.JiraIntegration"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/integrations/jira/issuetemplates": {
            "get": {
                "description": "List Issue Templates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jira"
                ],
                "summary": "List Issue Templates",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/openapi.JiraIssueTemplate"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create Issue Templates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jira"
                ],
                "summary": "Create Issue Templates",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.JiraIssueTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/openapi.JiraIssueTemplate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/integrations/jira/issuetemplates/{id}": {
            "get": {
                "description": "Get Issue Templates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jira"
                ],
                "summary": "Get Issue Templates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.JiraIssueTemplate"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update Issue Templates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jira"
                ],
                "summary": "Update Issue Templates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.JiraIssueTemplateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/openapi.JiraIssueTemplate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Issue Templates",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jira"
                ],
                "summary": "Delete Issue Templates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the resource",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/login": {
            "get": {
                "description": "Returns the login url to perform the signin on the identity provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "type": "string",
                        "format": "string",
                        "description": "The URL to redirect after the signin",
                        "name": "redirect",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "string",
                        "description": "Auth0 specific parameter",
                        "name": "screen_hint",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "string",
                        "description": "The prompt value (OIDC spec)",
                        "name": "prompt",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.Login"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/orgs/features": {
            "put": {
                "description": "Updates a feature configuration. It will report if this feature is available in the user info endpoint.",
                "tags": [
                    "Features"
                ],
                "summary": "Feature Update",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.FeatureRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/orgs/keys": {
            "get": {
                "description": "Get the organization key to run with ` + "`" + `hoop run` + "`" + ` command line",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Org Key",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.OrgKeyResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create the organization key to run with ` + "`" + `hoop run` + "`" + ` command line.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Create Org Key",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/openapi.OrgKeyResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Remove organization key",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Revoke Org Key",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/orgs/license": {
            "put": {
                "description": "Upload a new license into the system",
                "tags": [
                    "Server Management"
                ],
                "summary": "Update Org License",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/orgs/license/sign": {
            "post": {
                "description": "Sign a new license for a customer. This route is for internal use only",
                "tags": [
                    "Server Management"
                ],
                "summary": "Sign License",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.License"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/plugins": {
            "get": {
                "description": "List all Plugin resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "List Plugins",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/openapi.Plugin"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create Plugin resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Create Plugin",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.Plugin"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/openapi.Plugin"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/plugins/runbooks/connections/{name}/exec": {
            "post": {
                "description": "Start a execution using a Runbook as input",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Runbook Exec",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the connection",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.RunbookRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The execution has finished",
                        "schema": {
                            "$ref": "#/definitions/openapi.ExecResponse"
                        }
                    },
                    "202": {
                        "description": "The execution is still in progress",
                        "schema": {
                            "$ref": "#/definitions/openapi.ExecResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/plugins/runbooks/connections/{name}/templates": {
            "get": {
                "description": "List Runbooks templates by connection",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "List Runbooks By Connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the connection",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.RunbookList"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/plugins/runbooks/templates": {
            "get": {
                "description": "List all Runbooks",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "List Runbooks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.RunbookList"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/plugins/{name}": {
            "get": {
                "description": "Get a plugin resource by name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Plugin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the plugin",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.Plugin"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update Plugin resource. The ` + "`" + `config` + "`" + ` and ` + "`" + `name` + "`" + ` attributes are immutable for this endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Update Plugin",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the resource",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.Plugin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.Plugin"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/plugins/{name}/config": {
            "put": {
                "description": "Update the Plugin resource top level configuration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Update Plugin Config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the plugin",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.PluginConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.Plugin"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/proxymanager/connect": {
            "post": {
                "description": "Send a connect request to the client. A successful response indicates the client has stablished a connection.\nIf the connection resource has the review enabled, it returns a successful response containing the link of the review in the ` + "`" + `Localtion` + "`" + ` header.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Proxy Manager"
                ],
                "summary": "ProxyManager Connect",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.ProxyManagerRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.ProxyManagerResponse"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "It will contain the url of the review in case the connection resource has the review enabled"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/proxymanager/disconnect": {
            "post": {
                "description": "Send a disconnect request. The transport layer will disconnect the connected client asynchronously",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Proxy Manager"
                ],
                "summary": "ProxyManager Disconnect",
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "$ref": "#/definitions/openapi.ProxyManagerResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/proxymanager/status": {
            "get": {
                "description": "Get the current status of the client",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Proxy Manager"
                ],
                "summary": "ProxyManager Status",
                "parameters": [
                    {
                        "type": "string",
                        "format": "string",
                        "description": "Filter by type",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.ProxyManagerResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/publicserverinfo": {
            "get": {
                "description": "Get public server information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server Management"
                ],
                "summary": "Get Public Server Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.PublicServerInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/reports/sessions": {
            "get": {
                "description": "The report payload groups sessions by info types and by a custom field (` + "`" + `group_by` + "`" + `) provided by the client.\nThe items returns data containing the sum of redact fields performed by a given info type aggregated by the ` + "`" + `group_by` + "`" + ` attribute.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Session Reports",
                "parameters": [
                    {
                        "type": "string",
                        "example": "pgdemo",
                        "description": "Filter by the connection name",
                        "name": "connection_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-30",
                        "description": "End Date, default to current date + 1 day",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "connection",
                            "connection_type",
                            "id",
                            "user_email"
                        ],
                        "type": "string",
                        "default": "connection",
                        "example": "connection_type",
                        "description": "Group by this field",
                        "name": "group_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "FF970D17-23C6-4254-ABE6-103A9DDF30EE",
                        "description": "Filter the report by the ID of the session",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "date",
                        "example": "2024-07-29",
                        "description": "Start Date, default to current date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "johnwick@bad.org",
                        "description": "Filter the report by e-mail",
                        "name": "user_email",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "exec",
                            "connect"
                        ],
                        "type": "string",
                        "example": "exec",
                        "description": "Filter the report by the type of the verb",
                        "name": "verb",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.SessionReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/reviews": {
            "get": {
                "description": "List review resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "List Reviews",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/openapi.Review"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/reviews/{id}": {
            "get": {
                "description": "Get review resource by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Review",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource identifier of the review",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.Review"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the status of a review resource",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Update Review Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Resource identifier of the review",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.ReviewRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.Review"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/serverinfo": {
            "get": {
                "description": "Get server information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server Management"
                ],
                "summary": "Get Server Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.ServerInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/serviceaccounts": {
            "get": {
                "description": "List all service accounts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "List Service Accounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/openapi.ServiceAccount"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a service account that is associated with a identity provider client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Create Service Account",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.ServiceAccount"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/openapi.ServiceAccount"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/serviceaccounts/{subject}": {
            "put": {
                "description": "Update a service account that is associated with a identity provider client",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Update Service Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The subject identifier of the service account",
                        "name": "subject",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.ServiceAccount"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.ServiceAccount"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/sessions": {
            "get": {
                "description": "List session resources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "List Sessions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by user's subject id",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by connection's name",
                        "name": "connection",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by connection's type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "RFC3339",
                        "description": "Filter starting on this date",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "RFC3339",
                        "description": "Filter ending on this date",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit the amount of records to return (max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset to paginate through resources",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.SessionList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "This endpoint performs ad-hoc executions. It will wait 50 seconds for a sucessful response (200), otherwise return an Accepted status code (202) meaning the execution will be held asynchronously. The outcome could be obtained later on by fetching the resource using the attribute ` + "`" + `id` + "`" + `.\n\nThe payload of this request is used with the Connection resource to construct the command to be executed in the remote agent.\n- The ` + "`" + `script` + "`" + ` attribute is passed as stdin to the Connection resource ` + "`" + `command` + "`" + ` attribute.\n- The attribute ` + "`" + `client_args` + "`" + ` is appended to the suffix of the ` + "`" + `command` + "`" + `.\n\nFor example, the following connection:\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"name\": \"bash-connection\",\n  \"command\": [\"/bin/bash\"],\n  \"type\": \"custom\"\n}\n` + "`" + `` + "`" + `` + "`" + `\n\nWith the following payload:\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"script\": \"echo 'hello world'\",\n  \"client_args\": [\"-x\"],\n  \"connection\": \"bash-connection\"\n}\n` + "`" + `` + "`" + `` + "`" + `\n\nWill perform an ad-hoc shell execution as:\n\n` + "`" + `` + "`" + `` + "`" + `sh\n/bin/bash -x \u003c\u003cEOF\necho 'hello world'\nEOF\n` + "`" + `` + "`" + `` + "`" + `\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Exec",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.ExecRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The execution has finished",
                        "schema": {
                            "$ref": "#/definitions/openapi.ExecResponse"
                        }
                    },
                    "202": {
                        "description": "The execution is still in progress",
                        "schema": {
                            "$ref": "#/definitions/openapi.ExecResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/sessions/{session_id}": {
            "get": {
                "description": "Get a session by id. This endpoint returns a conditional response\n\n- When the query string ` + "`" + `extension` + "`" + ` is present it will return a payload containing a link to download the session\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"download_url\": \"http://127.0.0.1:8009/api/sessions/\u003cid\u003e/download?token=\u003ctoken\u003e\u0026extension=csv\u0026newline=1\u0026event-time=0\u0026events=o,e\",\n  \"expire_at\": \"2024-07-25T15:56:35.317601Z\",\n}\n` + "`" + `` + "`" + `` + "`" + `\n\n- Fetching the endpoint without any query string returns the payload documented for this endpoint\n- The attribute ` + "`" + `event_stream` + "`" + ` will be rendered differently if the request contains the query string ` + "`" + `event_stream=utf8` + "`" + `\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  (...)\n  \"event_stream\": [\"hello world\"]\n  (...)\n}\n` + "`" + `` + "`" + `` + "`" + `\n\nThe attribute ` + "`" + `metrics` + "`" + ` contains the following structure:\n\n` + "`" + `` + "`" + `` + "`" + `json\n{\n  \"data_masking\": {\n    \"err_count\": 0,\n    \"info_types\": {\n      \"EMAIL_ADDRESS\": 1\n    },\n    \"total_redact_count\": 1,\n    \"transformed_bytes\": 31\n  },\n  \"event_size\": 356\n}\n` + "`" + `` + "`" + `` + "`" + `\n",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Get Session",
                "parameters": [
                    {
                        "enum": [
                            "0",
                            "1"
                        ],
                        "type": "string",
                        "default": "0",
                        "example": "1",
                        "description": "Construct the file content adding the event time as prefix when parsing each event",
                        "name": "event-time",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "utf8"
                        ],
                        "type": "string",
                        "description": "This option will parse the session output (o) and error (e) events as an utf-8 content in the session payload",
                        "name": "event_stream",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "example": [
                            "i",
                            "o",
                            "e"
                        ],
                        "description": "Choose the type of events to include\n* ` + "`" + `i` + "`" + ` - Input (stdin)\n* ` + "`" + `o` + "`" + ` - Output (stdout)\n* ` + "`" + `e` + "`" + ` - Error (stderr)",
                        "name": "events",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "csv",
                        "description": "The file extension to donwload the session as a file content.\n* ` + "`" + `csv` + "`" + ` - it will parse the content to format in csv format\n* ` + "`" + `json` + "`" + ` - it will parse the content as a json stream.\n* ` + "`" + `\u003cany-format\u003e` + "`" + ` - No special parsing is applied",
                        "name": "extension",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "0",
                            "1"
                        ],
                        "type": "string",
                        "default": "0",
                        "example": "1",
                        "description": "Construct the file content adding a break line when parsing each event",
                        "name": "new_line",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The id of the resource",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.Session"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/sessions/{session_id}/download": {
            "get": {
                "description": "Download session by id",
                "produces": [
                    "application/octet-stream",
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Download Session",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the resource",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "Accept-Length": {
                                "type": "integer",
                                "description": "size in bytes of the content"
                            },
                            "Content-Disposition": {
                                "type": "string",
                                "description": "application/octet-stream"
                            },
                            "Content-Type": {
                                "type": "string",
                                "description": "application/octet-stream"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/sessions/{session_id}/exec": {
            "post": {
                "description": "Run an execution in a reviewed session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Core"
                ],
                "summary": "Reviewed Exec",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The id of the resource",
                        "name": "session_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The execution has finished",
                        "schema": {
                            "$ref": "#/definitions/openapi.ExecResponse"
                        }
                    },
                    "202": {
                        "description": "The execution is still in progress",
                        "schema": {
                            "$ref": "#/definitions/openapi.ExecResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "Signup anonymous authenticated user. This endpoint is only used for multi tenant setups.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Signup",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.SignupRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/userinfo": {
            "get": {
                "description": "Get own user's information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Get UserInfo",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.UserInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "List all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "List Users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/openapi.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Inviting a user will pre configure user definitions like display name, profile picture, groups or his slack id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Invite User",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/openapi.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/groups": {
            "get": {
                "description": "List all groups from all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "List User Groups",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/self/slack": {
            "patch": {
                "description": "Patch own user's slack id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Patch User Slack ID",
                "parameters": [
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.UserPatchSlackID"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{emailOrID}": {
            "get": {
                "description": "Get user by email or subject id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Get User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The subject identifier or email of the user",
                        "name": "emailOrID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "put": {
                "description": "Updates an existing user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The subject identifier of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body resource",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/openapi.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Management"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The subject identifier of the user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        },
        "/webhooks-dashboard": {
            "get": {
                "description": "Get webhooks dashboard url",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Features"
                ],
                "summary": "Get Webhooks Dashboard",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/openapi.WebhooksDashboardResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/openapi.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "openapi.AgentCreateResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "Token is the key in a DSN format: grpc|grpcs://\u003cname\u003e:\u003ckey\u003e@\u003chostname\u003e:\u003cport\u003e?mode=standard|embedded",
                    "type": "string",
                    "example": "grpc://default:xagt-zKQQA9PAjCVJ4O8VlE2QZScNEbfmFisg_OerkI21NEg@127.0.0.1:8010?mode=standard"
                }
            }
        },
        "openapi.AgentListResponse": {
            "type": "object",
            "properties": {
                "compiler": {
                    "type": "string",
                    "example": "gcc"
                },
                "goversion": {
                    "type": "string",
                    "example": "1.22.4"
                },
                "hostname": {
                    "description": "DEPRECATE top level metadata keys",
                    "type": "string",
                    "example": "john.wick.local"
                },
                "id": {
                    "description": "Unique ID of the resource",
                    "type": "string",
                    "format": "uuid",
                    "example": "8a4239fa-5116-4bbb-ad3c-ea1f294aac4a"
                },
                "kernel_version": {
                    "type": "string",
                    "example": "Linux 9acfe93d8195 5.15.49-linuxkit"
                },
                "machine_id": {
                    "type": "string",
                    "example": ""
                },
                "metadata": {
                    "description": "Metadata contains attributes regarding the machine where the agent is being executed\n* version - Version of the agent\n* go-version - Agent build information\n* compiler - Agent build information\n* platform - The operating system architecture where the agent is running\n* machine-id - The machine id of server\n* kernel-version - The kernel version of the server",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "compiler": "gcc",
                        "hostname": "johnwick.local",
                        "kernel-version": "Linux 9acfe93d8195 5.15.49-linuxkit",
                        "machine-id": "id",
                        "platform": "amd64",
                        "version": "1.23.14"
                    }
                },
                "mode": {
                    "description": "Mode of execution of the agent\n* standard - Is the default mode, which is suitable to run the agent as a standalone process\n* embedded - This mode is suitable when the agent needs to be run close to another process or application",
                    "type": "string",
                    "enum": [
                        "standard",
                        "embedded"
                    ],
                    "example": "standard"
                },
                "name": {
                    "description": "Unique name of the resource",
                    "type": "string",
                    "example": "default"
                },
                "platform": {
                    "type": "string",
                    "example": "amd64"
                },
                "status": {
                    "description": "The status of the agent\n* CONNECTED - The agent is connected with the gateway\n* DISCONNECTED - The agent is disconnected from the gateway",
                    "type": "string",
                    "enum": [
                        "CONNECTED",
                        "DISCONNECTED"
                    ],
                    "example": "DISCONNECTED"
                },
                "token": {
                    "description": "The token/key of the resource, this value is always empty for now",
                    "type": "string"
                },
                "version": {
                    "type": "string",
                    "example": "1.23.10"
                }
            }
        },
        "openapi.AgentRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "mode": {
                    "description": "Mode of execution of the agent\n* standard - Is the default mode, which is suitable to run the agent as a standalone process\n* embedded - This mode is suitable when the agent needs to be run close to another process or application",
                    "type": "string",
                    "default": "standard",
                    "enum": [
                        "standard",
                        "embedded"
                    ]
                },
                "name": {
                    "description": "Unique name of the resource",
                    "type": "string",
                    "example": "default"
                }
            }
        },
        "openapi.ClientStatusType": {
            "type": "string",
            "enum": [
                "ready",
                "connected",
                "disconnected"
            ],
            "x-enum-varnames": [
                "ClientStatusReady",
                "ClientStatusConnected",
                "ClientStatusDisconnected"
            ]
        },
        "openapi.Connection": {
            "type": "object",
            "required": [
                "access_mode_connect",
                "access_mode_exec",
                "access_mode_runbooks",
                "access_schema",
                "agent_id",
                "name",
                "type"
            ],
            "properties": {
                "access_mode_connect": {
                    "description": "Toggle Port Forwarding\n* enabled - Enable to perform port forwarding for this connection\n* disabled - Disable port forwarding for this connection",
                    "type": "string",
                    "enum": [
                        "enabled",
                        "disabled"
                    ]
                },
                "access_mode_exec": {
                    "description": "Toggle Ad Hoc Executions\n* enabled - Enable to run ad-hoc executions for this connection\n* disabled - Disable ad-hoc executions for this connection",
                    "type": "string",
                    "enum": [
                        "enabled",
                        "disabled"
                    ]
                },
                "access_mode_runbooks": {
                    "description": "Toggle Ad Hoc Runbooks Executions\n* enabled - Enable to run runbooks for this connection\n* disabled - Disable runbooks execution for this connection",
                    "type": "string",
                    "enum": [
                        "enabled",
                        "disabled"
                    ]
                },
                "access_schema": {
                    "description": "Toggle Introspection Schema\n* enabled - Enable the instrospection schema in the webapp\n* disabled - Disable the instrospection schema in the webapp",
                    "type": "string",
                    "enum": [
                        "enabled",
                        "disabled"
                    ]
                },
                "agent_id": {
                    "description": "The agent associated with this connection",
                    "type": "string",
                    "format": "uuid",
                    "example": "1837453e-01fc-46f3-9e4c-dcf22d395393"
                },
                "command": {
                    "description": "Is the shell command that is going to be executed when interacting with this connection.\nThis value is required if the connection is going to be used from the Webapp.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "/bin/bash"
                    ]
                },
                "guardrail_rules": {
                    "description": "The guard rail association id rules",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "5701046A-7B7A-4A78-ABB0-A24C95E6FE54",
                        "B19BBA55-8646-4D94-A40A-C3AFE2F4BAFD"
                    ]
                },
                "id": {
                    "description": "Unique ID of the resource",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true,
                    "example": "5364ec99-653b-41ba-8165-67236e894990"
                },
                "jira_issue_template_id": {
                    "description": "The jira issue templates ids associated to the connection",
                    "type": "string",
                    "example": "B19BBA55-8646-4D94-A40A-C3AFE2F4BAFD"
                },
                "managed_by": {
                    "description": "Managed By is a read only field that indicates who is managing this resource.\nWhen this attribute is set, this resource is considered immutable",
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "name": {
                    "description": "Name of the connection. This attribute is immutable when updating it",
                    "type": "string",
                    "example": "pgdemo"
                },
                "redact_enabled": {
                    "description": "When this option is enabled it will allow managing the redact types through the attribute ` + "`" + `redact_types` + "`" + `",
                    "type": "boolean"
                },
                "redact_types": {
                    "description": "Redact Types is a list of info types that will used to redact the output of the connection.\nPossible values are described in the DLP documentation: https://cloud.google.com/sensitive-data-protection/docs/infotypes-reference",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "EMAIL_ADDRESS"
                    ]
                },
                "reviewers": {
                    "description": "Reviewers is a list of groups that will review the connection before the user could execute it",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "dba-group"
                    ]
                },
                "secret": {
                    "description": "Secrets are environment variables that are going to be exposed\nin the runtime of the connection:\n* { envvar:[env-key]: [base64-val] } - Expose the value as environment variable\n* { filesystem:[env-key]: [base64-val] } - Expose the value as a temporary file path creating the value in the filesystem\n\nThe value could also represent an integration with a external provider:\n* { envvar:[env-key]: _aws:[secret-name]:[secret-key] } - Obtain the value dynamically in the AWS secrets manager and expose as environment variable\n* { envvar:[env-key]: _envjson:[json-env-name]:[json-env-key] } - Obtain the value dynamically from a JSON env in the agent runtime. Example: MYENV={\"KEY\": \"val\"}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "status": {
                    "description": "Status is a read only field that informs if the connection is available for interaction\n* online - The agent is connected and alive\n* offline - The agent is not connected",
                    "type": "string",
                    "enum": [
                        "online",
                        "offline"
                    ],
                    "readOnly": true
                },
                "subtype": {
                    "description": "Sub Type is the underline implementation of the connection:\n* postgres - Implements Postgres protocol\n* mysql - Implements MySQL protocol\n* mongodb - Implements MongoDB Wire Protocol\n* mssql - Implements Microsoft SQL Server Protocol\n* tcp - Forwards a TCP connection",
                    "type": "string",
                    "example": "postgres"
                },
                "tags": {
                    "description": "Tags to classify the connection",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "prod"
                    ]
                },
                "type": {
                    "description": "Type represents the main type of the connection:\n* database - Database protocols\n* application - Custom applications\n* custom - Shell applications",
                    "type": "string",
                    "enum": [
                        "database",
                        "application",
                        "custom"
                    ],
                    "example": "database"
                }
            }
        },
        "openapi.ConnectionColumn": {
            "type": "object",
            "properties": {
                "default_value": {
                    "description": "The default value of the column",
                    "type": "string"
                },
                "is_foreign_key": {
                    "description": "The foreign key of the column",
                    "type": "boolean"
                },
                "is_primary_key": {
                    "description": "The primary key of the column",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the column",
                    "type": "string"
                },
                "nullable": {
                    "description": "The nullable of the column",
                    "type": "boolean"
                },
                "type": {
                    "description": "The type of the column",
                    "type": "string"
                }
            }
        },
        "openapi.ConnectionDatabaseListResponse": {
            "type": "object",
            "properties": {
                "databases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "openapi.ConnectionIndex": {
            "type": "object",
            "properties": {
                "columns": {
                    "description": "The columns of the index",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_primary": {
                    "description": "The primary of the index",
                    "type": "boolean"
                },
                "is_unique": {
                    "description": "The unique of the index",
                    "type": "boolean"
                },
                "name": {
                    "description": "The name of the index",
                    "type": "string"
                }
            }
        },
        "openapi.ConnectionSchema": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "tables": {
                    "description": "The tables of the schema",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openapi.ConnectionTable"
                    }
                },
                "views": {
                    "description": "The views of the schema",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openapi.ConnectionView"
                    }
                }
            }
        },
        "openapi.ConnectionSchemaResponse": {
            "type": "object",
            "properties": {
                "schemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openapi.ConnectionSchema"
                    }
                }
            }
        },
        "openapi.ConnectionTable": {
            "type": "object",
            "properties": {
                "columns": {
                    "description": "The columns of the table",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openapi.ConnectionColumn"
                    }
                },
                "indexes": {
                    "description": "The indexes of the table",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openapi.ConnectionIndex"
                    }
                },
                "name": {
                    "description": "The name of the table",
                    "type": "string"
                }
            }
        },
        "openapi.ConnectionView": {
            "type": "object",
            "properties": {
                "columns": {
                    "description": "The columns of the view",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openapi.ConnectionColumn"
                    }
                },
                "name": {
                    "description": "The name of the view",
                    "type": "string"
                }
            }
        },
        "openapi.ExecRequest": {
            "type": "object",
            "properties": {
                "client_args": {
                    "description": "Additional arguments that will be joined when construction the command to be executed",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "hello world"
                    ]
                },
                "connection": {
                    "description": "The target connection",
                    "type": "string",
                    "example": "bash"
                },
                "labels": {
                    "description": "DEPRECATED in flavor of metadata",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "metadata": {
                    "description": "Metadata contains attributes that is going to be available in the Session resource",
                    "type": "object",
                    "additionalProperties": {}
                },
                "script": {
                    "description": "The input of the execution",
                    "type": "string",
                    "example": "echo"
                }
            }
        },
        "openapi.ExecResponse": {
            "type": "object",
            "properties": {
                "execution_time": {
                    "description": "The amount of time the execution took in miliseconds",
                    "type": "integer",
                    "example": 5903
                },
                "exit_code": {
                    "description": "The shell exit code, any non zero code means an error\n* 0 - Linux success exit code\n* -2 - internal gateway code that means it was unable to obtain a valid exit code number from the agent outcome packet\n* 254 - internal agent code that means it was unable to obtain a valid exit code number from the process",
                    "type": "integer",
                    "example": 1
                },
                "has_review": {
                    "description": "Inform if the connection has review enabled",
                    "type": "boolean",
                    "example": false
                },
                "output": {
                    "description": "Output contains an utf-8 output containing the outcome of the ad-hoc execution",
                    "type": "string"
                },
                "output_status": {
                    "description": "Status reports if the outcome of the execution\n* success - The execution was executed with success\n* failed - In case of internal error or when the agent returns an exit code greater than 0 or different than -2\n* running - The execution may still be running.",
                    "type": "string",
                    "enum": [
                        "success",
                        "failed",
                        "running"
                    ],
                    "example": "failed"
                },
                "session_id": {
                    "description": "Each execution creates a unique session id",
                    "type": "string",
                    "format": "uuid",
                    "example": "5701046A-7B7A-4A78-ABB0-A24C95E6FE54"
                },
                "truncated": {
                    "description": "If the ` + "`" + `output` + "`" + `` + "`" + ` field is truncated or not",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "openapi.FeatureRequest": {
            "type": "object",
            "required": [
                "name",
                "status"
            ],
            "properties": {
                "name": {
                    "description": "The name of the feature\n* ask-ai - Enable and consent to use ask ai feature",
                    "type": "string",
                    "enum": [
                        "ask-ai"
                    ]
                },
                "status": {
                    "description": "Status of the resource\n* enabled - The feature is consent and enable for use\n* disabled - The feature is disabled",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.FeatureStatusType"
                        }
                    ]
                }
            }
        },
        "openapi.FeatureStatusType": {
            "type": "string",
            "enum": [
                "enabled",
                "disabled"
            ],
            "x-enum-varnames": [
                "FeatureStatusEnabled",
                "FeatureStatusDisabled"
            ]
        },
        "openapi.GuardRailRuleRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "description": "The rule description",
                    "type": "string",
                    "example": "description about this rule"
                },
                "input": {
                    "description": "The input rule\n\n\t\t{\n\t\t\t\"name\": \"deny-select\",\n\t\t\t\"description\": \"\u003coptional-description\u003e\",\n\t\t\t\"input\": {\n\t\t\t\t\"rules\": [\n\t\t\t\t\t{\"type\": \"deny_words_list\", \"words\": [\"SELECT\"], \"pattern_regex\": \"\"}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"output\": {\n\t\t\t\t\"rules\": [\n\t\t\t\t\t{\"type\": \"pattern_match\", \"words\": [], \"pattern_regex\": \"[A-Z0-9]+\"}\n\t\t\t\t]\n\t\t\t}\n\t\t}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Unique name for the rule",
                    "type": "string",
                    "example": "my-strict-rule"
                },
                "output": {
                    "description": "The output rule\n\n\t\t{\n\t\t\t\"name\": \"deny-select\",\n\t\t\t\"description\": \"\u003coptional-description\u003e\",\n\t\t\t\"input\": {\n\t\t\t\t\"rules\": [\n\t\t\t\t\t{\"type\": \"deny_words_list\", \"words\": [\"SELECT\"], \"pattern_regex\": \"\"}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"output\": {\n\t\t\t\t\"rules\": [\n\t\t\t\t\t{\"type\": \"pattern_match\", \"words\": [], \"pattern_regex\": \"[A-Z0-9]+\"}\n\t\t\t\t]\n\t\t\t}\n\t\t}",
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "openapi.GuardRailRuleResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "The time the resource was created",
                    "type": "string",
                    "readOnly": true,
                    "example": "2024-07-25T15:56:35.317601Z"
                },
                "description": {
                    "description": "The rule description",
                    "type": "string",
                    "example": "description about this rule"
                },
                "id": {
                    "description": "The resource identifier",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true,
                    "example": "15B5A2FD-0706-4A47-B1CF-B93CCFC5B3D7"
                },
                "input": {
                    "description": "The input rule\n\n\t\t{\n\t\t\t\"name\": \"deny-select\",\n\t\t\t\"description\": \"\u003coptional-description\u003e\",\n\t\t\t\"input\": {\n\t\t\t\t\"rules\": [\n\t\t\t\t\t{\"type\": \"deny_words_list\", \"words\": [\"SELECT\"], \"pattern_regex\": \"\", \"name\": \"\u003coptional-name\u003e\"}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"output\": {\n\t\t\t\t\"rules\": [\n\t\t\t\t\t{\"type\": \"pattern_match\", \"words\": [], \"pattern_regex\": \"[A-Z0-9]+\"}\n\t\t\t\t]\n\t\t\t}\n\t\t}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "Unique name for the rule",
                    "type": "string",
                    "example": "my-strict-rule"
                },
                "output": {
                    "description": "The output rule\n\n\t\t{\n\t\t\t\"name\": \"deny-select\",\n\t\t\t\"description\": \"\u003coptional-description\u003e\",\n\t\t\t\"input\": {\n\t\t\t\t\"rules\": [\n\t\t\t\t\t{\"type\": \"deny_words_list\", \"words\": [\"SELECT\"], \"pattern_regex\": \"\", \"name\": \"\u003coptional-name\u003e\"}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"output\": {\n\t\t\t\t\"rules\": [\n\t\t\t\t\t{\"type\": \"pattern_match\", \"words\": [], \"pattern_regex\": \"[A-Z0-9]+\"}\n\t\t\t\t]\n\t\t\t}\n\t\t}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "updated_at": {
                    "description": "The time the resource was updated",
                    "type": "string",
                    "readOnly": true,
                    "example": "2024-07-25T15:56:35.317601Z"
                }
            }
        },
        "openapi.HTTPError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "the error description"
                }
            }
        },
        "openapi.JiraIntegration": {
            "type": "object",
            "required": [
                "api_token",
                "url",
                "user"
            ],
            "properties": {
                "api_token": {
                    "description": "The API token for Jira authentication",
                    "type": "string"
                },
                "created_at": {
                    "description": "The creation date and time of the integration",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier of the integration",
                    "type": "string"
                },
                "org_id": {
                    "description": "The organization identifier",
                    "type": "string"
                },
                "status": {
                    "description": "Report if the integration is enabled or disabled",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.JiraIntegrationStatus"
                        }
                    ]
                },
                "updated_at": {
                    "description": "The last update date and time of the integration",
                    "type": "string"
                },
                "url": {
                    "description": "The URL of the Jira instance",
                    "type": "string"
                },
                "user": {
                    "description": "The username for Jira authentication",
                    "type": "string"
                }
            }
        },
        "openapi.JiraIntegrationStatus": {
            "type": "string",
            "enum": [
                "enabled",
                "disabled"
            ],
            "x-enum-varnames": [
                "JiraIntegrationStatusActive",
                "JiraIntegrationStatusInactive"
            ]
        },
        "openapi.JiraIssueTemplate": {
            "type": "object",
            "properties": {
                "cmdb_types": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "created_at": {
                    "description": "The time when the template was created",
                    "type": "string"
                },
                "description": {
                    "description": "The description of the template",
                    "type": "string"
                },
                "id": {
                    "description": "The unique identifier of the integration",
                    "type": "string"
                },
                "issue_type_name": {
                    "description": "The issue type name (request type) that will be associated to the issue",
                    "type": "string"
                },
                "mapping_types": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "The name of the template",
                    "type": "string"
                },
                "project_key": {
                    "description": "The project key which is the shortand version of the project's name",
                    "type": "string"
                },
                "prompt_types": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "updated_at": {
                    "description": "The time when the template was updated",
                    "type": "string"
                }
            }
        },
        "openapi.JiraIssueTemplateRequest": {
            "type": "object",
            "properties": {
                "cmdb_types": {
                    "description": "Cmdb Types are custom fields integrated with the Jira Assets API\n\n\t\t{\n\t\t  \"items\": [\n\t\t    {\n\t\t      \"description\": \"Service Field\",\n\t\t      \"jira_field\": \"customfield_10110\",\n\t\t      \"jira_object_type\": \"Service\",\n\t\t      \"required\": true,\n\t\t      \"value\": \"mydb-prod\"\n\t\t    }\n\t\t  ]\n\t\t}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "description": {
                    "description": "The description of the template",
                    "type": "string"
                },
                "issue_type_name": {
                    "description": "The issue type name (request type) that will be associated to the issue",
                    "type": "string"
                },
                "mapping_types": {
                    "description": "The automated fields that will be sent when creating the issue.\nThere're two types\n- preset: obtain the value from a list of available fields that could be propagated\nThe list of available preset values are:\n\n\t\t- session.id\n\t\t- session.user_email\n\t\t- session.user_id\n\t\t- session.user_name\n\t\t- session.type\n\t\t- session.connection\n\t\t- session.status\n\t\t- session.verb\n\t\t- session.start_date\n\n- custom: use a custom static value\n\n\t\t{\n\t\t  \"items\": [\n\t\t    {\n\t\t      \"description\": \"Hoop Connection Name\",\n\t\t      \"jira_field\": \"customfield_10050\",\n\t\t      \"type\": \"preset\",\n\t\t      \"value\": \"session.connection\"\n\t\t    }\n\t\t  ]\n\t\t}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "The name of the template",
                    "type": "string"
                },
                "project_key": {
                    "description": "The project key which is the shortand version of the project's name",
                    "type": "string"
                },
                "prompt_types": {
                    "description": "The prompt fields that will be show to user before executing a session\n\n\t\t{\n\t\t  \"items\": [\n\t\t    {\n\t\t      \"description\": \"Squad Name\",\n\t\t      \"jira_field\": \"customfield_10052\",\n\t\t      \"label\": \"Squad Name\",\n\t\t      \"required\": true\n\t\t    }\n\t\t  ]\n\t\t}",
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "openapi.License": {
            "type": "object",
            "properties": {
                "key_id": {
                    "description": "A sha256 identifier of the public key",
                    "type": "string",
                    "example": "743420a8aee6f063d50e6203b588c06381020c84fea3543ff10f8470873779bc"
                },
                "payload": {
                    "description": "The payload information of the license",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.LicensePayload"
                        }
                    ]
                },
                "signature": {
                    "description": "The payload signature",
                    "type": "string",
                    "example": "pA4POB1vB1yBfE+HcPD4FSPT8yY="
                }
            }
        },
        "openapi.LicensePayload": {
            "type": "object",
            "properties": {
                "allowed_hosts": {
                    "description": "The domains that are allowed to use this license.\n* ` + "`" + `johhwick.org` + "`" + ` - Issue a license that is valid only for the domain ` + "`" + `johnwick.org` + "`" + `\n* ` + "`" + `*.johhwick.org` + "`" + ` - Issue a license that is valid for all subdomains, example: ` + "`" + `\u003canydomain\u003e.johnwick.org` + "`" + `\n* ` + "`" + `*.johhwick.org` + "`" + `, ` + "`" + `*.johnwick2.org` + "`" + ` - Issue a license that is valid for multiple wildcard subdomains\n* ` + "`" + `*` + "`" + ` - Issue a license that is valid for all domains (not recommeded)",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "johnwick.org",
                        "homolog.jhonwick.org",
                        "*.system.johnwick.org"
                    ]
                },
                "description": {
                    "description": "The description containing information about the license",
                    "type": "string",
                    "example": "John Wick's Bad Organization"
                },
                "expire_at": {
                    "description": "The time in timestamp the license expires",
                    "type": "integer",
                    "format": "timestamp",
                    "example": 1722997969
                },
                "issued_at": {
                    "description": "The time in timestamp the license was issued",
                    "type": "integer",
                    "format": "timestamp",
                    "example": 1721997969
                },
                "type": {
                    "description": "Type of the license\n* oss - Open Source License\n* enterprise - Enterprise License",
                    "type": "string",
                    "enum": [
                        "oss",
                        "enterprise"
                    ],
                    "example": "enterprise"
                }
            }
        },
        "openapi.LivenessCheck": {
            "type": "object",
            "properties": {
                "liveness": {
                    "type": "string",
                    "enum": [
                        "ERR",
                        "OK"
                    ],
                    "example": "OK"
                }
            }
        },
        "openapi.Login": {
            "type": "object",
            "properties": {
                "login_url": {
                    "description": "The URL to redirect the user to the identity provider",
                    "type": "string"
                }
            }
        },
        "openapi.OrgKeyResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The agent unique identifier",
                    "type": "string",
                    "format": "uuid",
                    "example": "C02402E0-0175-445F-B46D-513D1F708991"
                },
                "key": {
                    "description": "The key in DSN format",
                    "type": "string",
                    "format": "dsn",
                    "example": "grpcs://default:\u003csecret-key\u003e@127.0.0.1:8010"
                }
            }
        },
        "openapi.Plugin": {
            "type": "object",
            "required": [
                "connections",
                "name"
            ],
            "properties": {
                "config": {
                    "description": "The top level plugin configuration. This value is immutable after creation",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.PluginConfig"
                        }
                    ]
                },
                "connections": {
                    "description": "The list of connections configured for a specific plugin",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openapi.PluginConnection"
                    }
                },
                "id": {
                    "description": "The resource identifier",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true,
                    "example": "15B5A2FD-0706-4A47-B1CF-B93CCFC5B3D7"
                },
                "name": {
                    "description": "The name of the plugin to enable\n* audit - Audit connections\n* access_control - Enable access control by groups\n* dlp - Enable Google Data Loss Prevention (requires further configuration)\n* indexer - Enable indexing session contents\n* review - Enable reviewing executions\n* runbooks - Enable configuring runbooks\n* slack - Enable reviewing execution through Slack\n* webhooks - Send events via webhooks",
                    "type": "string",
                    "enum": [
                        "audit",
                        "access_control",
                        "dlp",
                        "indexer",
                        "review",
                        "runbooks",
                        "slack",
                        "webhooks"
                    ],
                    "example": "slack"
                },
                "priority": {
                    "description": "DEPRECATED, should be always 0",
                    "type": "integer",
                    "default": 0
                },
                "source": {
                    "description": "DEPRECATED, should be always null",
                    "type": "string",
                    "default": "null"
                }
            }
        },
        "openapi.PluginConfig": {
            "type": "object",
            "properties": {
                "envvars": {
                    "description": "The top level plugin configuration. The value is show as ` + "`" + `REDACTED` + "`" + ` after creation",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "SLACK_APP_TOKEN": "eC1hcHAtdG9rZW4=",
                        "SLACK_BOT_TOKEN": "eG94Yi10b2tlbg=="
                    }
                },
                "id": {
                    "description": "The resource identifier",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true,
                    "example": "D9A998B3-AA7B-49B0-8463-C9E36435FC0B"
                }
            }
        },
        "openapi.PluginConnection": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "The configuration for this plugin. Each plugin could have distinct set of configurations.\nRefer to Hoop's documentation for more information.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "EMAIL_ADDRESS",
                        "URL"
                    ]
                },
                "id": {
                    "description": "The connection ID reference",
                    "type": "string",
                    "format": "uuid",
                    "example": "B702C63C-E6EB-46BB-9D1E-90EA077E4582"
                },
                "name": {
                    "description": "The name of the connection",
                    "type": "string",
                    "example": "pgdemo"
                }
            }
        },
        "openapi.ProxyManagerRequest": {
            "type": "object",
            "required": [
                "connection_name",
                "port"
            ],
            "properties": {
                "access_duration": {
                    "description": "The access duration (in nanoseconds) of a session in case the connect has a review.\nDefault to 30 minutes",
                    "type": "integer",
                    "example": 1800000000000
                },
                "connection_name": {
                    "description": "The connection target",
                    "type": "string",
                    "example": "pgdemo"
                },
                "port": {
                    "description": "The port to listen in the client",
                    "type": "string",
                    "example": "5432"
                }
            }
        },
        "openapi.ProxyManagerResponse": {
            "type": "object",
            "properties": {
                "access_duration": {
                    "description": "The request access duration in case of review",
                    "type": "integer",
                    "example": 1800000000000
                },
                "connected-at": {
                    "description": "The time (RFC3339) when the client connect",
                    "type": "string",
                    "example": "2024-07-25T19:36:41Z"
                },
                "connection_name": {
                    "description": "The requested connection name",
                    "type": "string"
                },
                "id": {
                    "description": "Deterministic uuid identifier of the user",
                    "type": "string",
                    "format": "uuid",
                    "example": "20A5AABE-C35D-4F04-A5A7-C856EE6C7703"
                },
                "metadata": {
                    "description": "Metadata information about the client",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "go-version": "1.22.4",
                        "hostname": "johnwick.local",
                        "platform": "amd64",
                        "session": "15B3C616-6B43-4F85-B4FD-B83378A866C2",
                        "version": "1.23.4"
                    }
                },
                "port": {
                    "description": "The requested client port to listen",
                    "type": "string"
                },
                "status": {
                    "description": "The status of the connection request\n* ready - indicates the grpc client is ready to subscribe to a new connection\n* connected - indicates the client has opened a new session\n* disconnected - indicates the grpc client has disconnected",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.ClientStatusType"
                        }
                    ]
                }
            }
        },
        "openapi.PublicServerInfo": {
            "type": "object",
            "properties": {
                "auth_method": {
                    "description": "Auth method used by the server",
                    "type": "string",
                    "enum": [
                        "oidc",
                        "local"
                    ],
                    "example": "local"
                }
            }
        },
        "openapi.Review": {
            "type": "object",
            "properties": {
                "access_duration": {
                    "description": "The amount of time (nanoseconds) to allow access to the connection. It's valid only for ` + "`" + `jit` + "`" + ` type reviews` + "`" + `",
                    "type": "integer",
                    "default": 1800000000000,
                    "readOnly": true,
                    "example": 0
                },
                "created_at": {
                    "description": "The time the resource was created",
                    "type": "string",
                    "readOnly": true,
                    "example": "2024-07-25T15:56:35.317601Z"
                },
                "id": {
                    "description": "Reousrce identifier",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true,
                    "example": "9F9745B4-C77B-4D52-84D3-E24F67E3623C"
                },
                "input": {
                    "description": "The input that was issued when the resource was created",
                    "type": "string",
                    "readOnly": true,
                    "example": "SELECT NOW()"
                },
                "input_clientargs": {
                    "description": "The client arguments when the resource was created",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "readOnly": true,
                    "example": [
                        "-x"
                    ]
                },
                "org": {
                    "description": "Organization identifier",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true,
                    "example": "A72CF2A0-12D0-4E0D-A732-E34FFA3D9417"
                },
                "review_connection": {
                    "description": "The review connection information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.ReviewConnection"
                        }
                    ],
                    "readOnly": true
                },
                "review_groups_data": {
                    "description": "Contains the groups that requires to approve this review",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openapi.ReviewGroup"
                    },
                    "readOnly": true
                },
                "review_owner": {
                    "description": "Contains information about the owner of this resource",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.ReviewOwner"
                        }
                    ],
                    "readOnly": true
                },
                "revoke_at": {
                    "description": "The time when this review was revoked",
                    "type": "string",
                    "readOnly": true,
                    "example": ""
                },
                "session": {
                    "description": "The id of session",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true,
                    "example": "35DB0A2F-E5CE-4AD8-A308-55C3108956E5"
                },
                "status": {
                    "description": "The status of the review\n* PENDING - The resource is waiting to be reviewed\n* APPROVED - The resource is fully approved\n* REJECTED - The resource is fully rejected\n* REVOKED - The resource was revoked after being approved\n* PROCESSING - The review is being executed\n* EXECUTED - The review was executed\n* UNKNOWN - Unable to know the status of the review",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.ReviewStatusType"
                        }
                    ]
                },
                "type": {
                    "description": "The type of this review\n* onetime - Represents a one time execution\n* jit - Represents a time based review",
                    "enum": [
                        "onetime",
                        "jit"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.ReviewType"
                        }
                    ],
                    "readOnly": true
                }
            }
        },
        "openapi.ReviewConnection": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The resource identifier",
                    "type": "string",
                    "readOnly": true,
                    "example": "20A5AABE-C35D-4F04-A5A7-C856EE6C7703"
                },
                "name": {
                    "description": "The name of the connection",
                    "type": "string",
                    "readOnly": true,
                    "example": "pgdemo"
                }
            }
        },
        "openapi.ReviewGroup": {
            "type": "object",
            "properties": {
                "group": {
                    "description": "The group to approve this review",
                    "type": "string",
                    "readOnly": true,
                    "example": "sre"
                },
                "id": {
                    "description": "The resource identifier",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true,
                    "example": "20A5AABE-C35D-4F04-A5A7-C856EE6C7703"
                },
                "review_date": {
                    "description": "The date which this review was performed",
                    "type": "string",
                    "readOnly": true,
                    "example": "2024-07-25T19:36:41Z"
                },
                "reviewed_by": {
                    "description": "The review owner",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.ReviewOwner"
                        }
                    ],
                    "readOnly": true
                },
                "status": {
                    "description": "The reviewed status\n* APPROVED - Approve the review resource\n* REJECTED - Reject the review resource\n* REVOKED - Revoke an approved review",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.ReviewRequestStatusType"
                        }
                    ],
                    "example": "APPROVED"
                }
            }
        },
        "openapi.ReviewOwner": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "The email of the owner",
                    "type": "string",
                    "readOnly": true,
                    "example": "john.wick@bad.org"
                },
                "id": {
                    "description": "The resource identifier",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true,
                    "example": "D5BFA2DD-7A09-40AE-AFEB-C95787BA9E90"
                },
                "name": {
                    "description": "The display name of the owner",
                    "type": "string",
                    "readOnly": true,
                    "example": "John Wick"
                },
                "slack_id": {
                    "description": "The Slack ID of the owner",
                    "type": "string",
                    "readOnly": true,
                    "example": "U053ELZHB53"
                }
            }
        },
        "openapi.ReviewRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "description": "The reviewed status\n* APPROVED - Approve the review resource\n* REJECTED - Reject the review resource\n* REVOKED - Revoke an approved review",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.ReviewRequestStatusType"
                        }
                    ],
                    "example": "APPROVED"
                }
            }
        },
        "openapi.ReviewRequestStatusType": {
            "type": "string",
            "enum": [
                "APPROVED",
                "REJECTED",
                "REVOKED"
            ],
            "x-enum-varnames": [
                "ReviewStatusRequestApprovedType",
                "ReviewStatusRequestRejectedType",
                "ReviewStatusRequestRevokedType"
            ]
        },
        "openapi.ReviewStatusType": {
            "type": "string",
            "enum": [
                "PENDING",
                "APPROVED",
                "REJECTED",
                "REVOKED",
                "PROCESSING",
                "EXECUTED",
                "UNKNOWN"
            ],
            "x-enum-varnames": [
                "ReviewStatusPending",
                "ReviewStatusApproved",
                "ReviewStatusRejected",
                "ReviewStatusRevoked",
                "ReviewStatusProcessing",
                "ReviewStatusExecuted",
                "ReviewStatusUnknown"
            ]
        },
        "openapi.ReviewType": {
            "type": "string",
            "enum": [
                "jit",
                "onetime"
            ],
            "x-enum-varnames": [
                "ReviewTypeJit",
                "ReviewTypeOneTime"
            ]
        },
        "openapi.Runbook": {
            "type": "object",
            "properties": {
                "connections": {
                    "description": "The connections that could be used for this runbook",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "pgdemo",
                        "bash"
                    ]
                },
                "error": {
                    "description": "The error description if it failed to render",
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata contains the attributes parsed from a template.\nPayload Example:\n\n\t\t{\n\t\t\t\"customer_id\" : {\n\t\t\t\t\"description\": \"the id of the customer\",\n\t\t\t\t\"required\": true,\n\t\t\t\t\"type\": \"text\",\n\t\t\t\t\"default\": \"Default value to use\"\n\t\t\t},\n\t\t\t\"country\": {\n\t\t\t\t\"description\": \"the country code US; BR, etc\",\n\t\t\t\t\"required\": false,\n\t\t\t\t\"type\": \"select\",\n\t\t\t\t\"options\": [\"US\", \"BR\"]\n\t\t\t}\n\t\t}\n\nBy default it will have the attributes ` + "`" + `description=\"\"` + "`" + `, ` + "`" + `required=false` + "`" + ` and ` + "`" + `type=\"text\"` + "`" + `.",
                    "type": "object",
                    "additionalProperties": {}
                },
                "name": {
                    "description": "File path relative to repository root containing runbook file in the following format: ` + "`" + `/path/to/file.runbook.\u003cext\u003e` + "`" + `",
                    "type": "string",
                    "example": "ops/update-user.runbook.sh"
                }
            }
        },
        "openapi.RunbookList": {
            "type": "object",
            "properties": {
                "commit": {
                    "description": "The commit sha",
                    "type": "string",
                    "example": "03c25fd64c74712c71798250d256d4b859dd5853"
                },
                "commit_author": {
                    "description": "The commit author",
                    "type": "string",
                    "example": "John Wick \u003cjohn.wick@bad.org\u003e"
                },
                "commit_message": {
                    "description": "The commit message",
                    "type": "string",
                    "example": "runbook update"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openapi.Runbook"
                    }
                }
            }
        },
        "openapi.RunbookRequest": {
            "type": "object",
            "required": [
                "file_name"
            ],
            "properties": {
                "client_args": {
                    "description": "Additional arguments to pass down to the connection",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "--verbose"
                    ]
                },
                "env_vars": {
                    "description": "Environment Variables that will be included in the runtime\n* { envvar:[env-key]: [base64-val] } - Expose the value as environment variable\n* { filesystem:[env-key]: [base64-val] } - Expose the value as a temporary file path creating the value in the filesystem",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "envvar": "PASSWORD:MTIz",
                        "filesystem": "SECRET_FILE:bXlzZWNyZXQ="
                    }
                },
                "file_name": {
                    "description": "The relative path name of the runbook file from the git source",
                    "type": "string",
                    "example": "myrunbooks/run-backup.runbook.sql"
                },
                "metadata": {
                    "description": "Metadata attributes to add in the session",
                    "type": "object",
                    "additionalProperties": {}
                },
                "parameters": {
                    "description": "The parameters of the runbook. It must match with the declared attributes",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "example": {
                        "amount": "10",
                        "wallet_id": "6736"
                    }
                },
                "ref_hash": {
                    "description": "The commit sha reference to obtain the file",
                    "type": "string",
                    "example": "20320ebbf9fc612256b67dc9e899bbd6e4745c77"
                }
            }
        },
        "openapi.ServerInfo": {
            "type": "object",
            "properties": {
                "admin_username": {
                    "description": "The role name of the admin group",
                    "type": "string",
                    "example": "admin"
                },
                "api_url": {
                    "description": "API URL advertise to clients",
                    "type": "string",
                    "example": "https://api.johnwick.org"
                },
                "auth_method": {
                    "description": "Auth method used by the server",
                    "type": "string",
                    "enum": [
                        "oidc",
                        "local"
                    ],
                    "example": "local"
                },
                "commit_sha": {
                    "description": "Commit SHA of the version",
                    "type": "string",
                    "example": "e6b94e86352e934b66d9c7ab2821a267dc18dfee"
                },
                "disable_sessions_download": {
                    "description": "Indicates if session download functionality is disabled\n* true - Session download is disabled and not available to users\n* false - Session download is enabled and available to users",
                    "type": "boolean"
                },
                "go_debug": {
                    "description": "Expose ` + "`" + `GODEBUG` + "`" + ` flags enabled",
                    "type": "string",
                    "example": "http2debug=2"
                },
                "grpc_url": {
                    "description": "The GRPC_URL advertise to clients",
                    "type": "string",
                    "example": "127.0.0.1:8009"
                },
                "has_ask_ai_credentials": {
                    "description": "Report if ASK_AI_CREDENTIALS is set (openapi credentials)",
                    "type": "boolean"
                },
                "has_idp_audience": {
                    "description": "Report if IDP_AUDIENCE env is set",
                    "type": "boolean"
                },
                "has_idp_custom_scopes": {
                    "description": "Report if IDP_CUSTOM_SCOPES env is set",
                    "type": "boolean"
                },
                "has_postgrest_role": {
                    "description": "Report if IDP_CUSTOM_SCOPES env is set",
                    "type": "boolean"
                },
                "has_redact_credentials": {
                    "description": "Report if GOOGLE_APPLICATION_CREDENTIALS_JSON is set",
                    "type": "boolean"
                },
                "has_webhook_app_key": {
                    "description": "Report if WEBHOOK_APPKEY is set",
                    "type": "boolean"
                },
                "license_info": {
                    "$ref": "#/definitions/openapi.ServerLicenseInfo"
                },
                "log_level": {
                    "description": "Log level of the server",
                    "type": "string",
                    "enum": [
                        "INFO",
                        "WARN",
                        "DEBUG",
                        "ERROR"
                    ],
                    "example": "INFO"
                },
                "tenancy_type": {
                    "description": "The tenancy type",
                    "type": "string",
                    "enum": [
                        "selfhosted",
                        "multitenant"
                    ]
                },
                "version": {
                    "description": "Version of the server",
                    "type": "string",
                    "example": "1.23.15"
                }
            }
        },
        "openapi.ServerLicenseInfo": {
            "type": "object",
            "properties": {
                "allowed_hosts": {
                    "description": "The allowed hosts to use this license",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "johnwick.org",
                        "homolog.johnwick.org"
                    ]
                },
                "expire_at": {
                    "description": "The timestamp value when this license is valid",
                    "type": "integer",
                    "example": 1722261422
                },
                "is_valid": {
                    "description": "Report if the license is valid",
                    "type": "boolean"
                },
                "issued_at": {
                    "description": "The timestamp value when this license was issued",
                    "type": "integer",
                    "example": 1722261321
                },
                "key_id": {
                    "description": "Public Key identifier of who signed the license",
                    "type": "string",
                    "example": "f2fb0c3143822b08be26f8fc5b703e0a6689e675"
                },
                "type": {
                    "description": "The type of license",
                    "type": "string",
                    "enum": [
                        "oss",
                        "enterprise"
                    ],
                    "example": "enterprise"
                },
                "verified_host": {
                    "description": "The verified host (API_URL env)",
                    "type": "string",
                    "example": "homolog.johnwick.org"
                },
                "verify_error": {
                    "description": "The error returned when verifying the license",
                    "type": "string",
                    "example": "unable to verify license"
                }
            }
        },
        "openapi.ServiceAccount": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "groups": {
                    "description": "The groups in which this service account belongs to",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "engineering"
                    ]
                },
                "id": {
                    "description": "The unique identifier of this resource",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true,
                    "example": "BF997324-5A27-4778-806A-41EE83598494"
                },
                "name": {
                    "description": "The display name of this service account",
                    "type": "string",
                    "example": "system-automation"
                },
                "org_id": {
                    "description": "Organization ID",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true
                },
                "status": {
                    "description": "Inactive service account will not be able to access the api",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.ServiceAccountStatusType"
                        }
                    ]
                },
                "subject": {
                    "description": "Subject is the external identifier that maps the user from the identity provider.\nThis field is immutable after creation",
                    "type": "string",
                    "example": "bJ8xV3ASWGTi7L9Z6zvHKqxJlnZM5TxV1bRdc0706vW"
                }
            }
        },
        "openapi.ServiceAccountStatusType": {
            "type": "string",
            "enum": [
                "active",
                "inactive"
            ],
            "x-enum-varnames": [
                "ServiceAccountStatusActive",
                "ServiceAccountStatusInactive"
            ]
        },
        "openapi.Session": {
            "type": "object",
            "properties": {
                "connection": {
                    "description": "The connection name of this resource",
                    "type": "string",
                    "example": "pgdemo"
                },
                "end_date": {
                    "description": "When the execution ended. A null value indicates the session is still running",
                    "type": "string",
                    "example": "2024-07-25T15:56:35.361101Z"
                },
                "event_size": {
                    "description": "The stored resource size in bytes",
                    "type": "integer",
                    "example": 569
                },
                "event_stream": {
                    "description": "The stream containing the output of the execution in the following format\n\n` + "`" + `[[0.268589438, \"i\", \"ZW52\"], ...]` + "`" + `\n\n* ` + "`" + `\u003cevent-time\u003e` + "`" + ` - relative time in miliseconds to start_date\n* ` + "`" + `\u003cevent-type\u003e` + "`" + ` - the event type as string (i: input, o: output e: output-error)\n* ` + "`" + `\u003cbase64-content\u003e` + "`" + ` - the content of the session encoded as base64 string",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "description": "The resource unique identifier",
                    "type": "string",
                    "format": "uuid",
                    "example": "1CBC8DB5-FBF8-4293-8E35-59A6EEA40207"
                },
                "integrations_metadata": {
                    "description": "Metadata attributes related to integrations with third party services",
                    "type": "object",
                    "additionalProperties": {}
                },
                "labels": {
                    "description": "DEPRECATED in flavor of metrics and metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.SessionLabelsType"
                        }
                    ]
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {}
                },
                "metrics": {
                    "description": "Refactor to use a struct",
                    "type": "object",
                    "additionalProperties": {}
                },
                "org_id": {
                    "description": "The organization unique identifier",
                    "type": "string",
                    "format": "uuid",
                    "example": "0CD7F941-2BB8-4F9F-93B0-11620D4652AB"
                },
                "review": {
                    "description": "Review of this session. In case the review doesn't exist this field will be null",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.Review"
                        }
                    ]
                },
                "script": {
                    "description": "The input of the session. This value is only set for the verb ` + "`" + `exec` + "`" + `",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.SessionScriptType"
                        }
                    ],
                    "example": {
                        "data": "SELECT NOW()"
                    }
                },
                "start_date": {
                    "description": "When the execution started",
                    "type": "string",
                    "example": "2024-07-25T15:56:35.317601Z"
                },
                "status": {
                    "description": "Status of the resource\n* ready - the resource is ready to be executed, after being approved by a user\n* open - the session started and it's running\n* done - the session has finished",
                    "type": "string",
                    "enum": [
                        "open",
                        "ready",
                        "done"
                    ]
                },
                "type": {
                    "description": "The connection type of this resource",
                    "type": "string",
                    "example": "database"
                },
                "user": {
                    "description": "The user email of the resource",
                    "type": "string"
                },
                "user_id": {
                    "description": "The user subject identifier of the resource",
                    "type": "string",
                    "example": "nJ1xV3ASWGTi7L8Y6zvnKqxNlnZM2TxV1bRdc0706vZ"
                },
                "user_name": {
                    "description": "The user display name of this resource",
                    "type": "string",
                    "example": "John Wick"
                },
                "verb": {
                    "description": "Verb is how the client has interacted with this resource\n* exec - Is an ad-hoc shell execution\n* connect - Interactive execution, protocol port forwarding or interactive shell session",
                    "type": "string",
                    "enum": [
                        "connect",
                        "exec"
                    ]
                }
            }
        },
        "openapi.SessionLabelsType": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "openapi.SessionList": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openapi.Session"
                    }
                },
                "has_next_page": {
                    "type": "boolean"
                },
                "total": {
                    "type": "integer",
                    "example": 100
                }
            }
        },
        "openapi.SessionReport": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/openapi.SessionReportItem"
                    }
                },
                "total_redact_count": {
                    "description": "The sum of ` + "`" + `items[].redact_total` + "`" + `",
                    "type": "integer",
                    "example": 12
                },
                "total_transformed_bytes": {
                    "description": "The sum of ` + "`" + `items[].transformed_bytes` + "`" + `",
                    "type": "integer",
                    "example": 40293
                }
            }
        },
        "openapi.SessionReportItem": {
            "type": "object",
            "properties": {
                "info_type": {
                    "description": "The info type name",
                    "type": "string",
                    "example": "EMAIL_ADDRESS"
                },
                "redact_total": {
                    "description": "The total redacts in which this info type was found for this resource",
                    "type": "integer",
                    "example": 23
                },
                "resource": {
                    "description": "The value of the group_by resource (connection, session id, email or connection type)",
                    "type": "string",
                    "example": "connection"
                },
                "transformed_bytes": {
                    "description": "The total transformed bytes performed by this info type",
                    "type": "integer",
                    "example": 30012
                }
            }
        },
        "openapi.SessionScriptType": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "openapi.SignupRequest": {
            "type": "object",
            "required": [
                "org_name"
            ],
            "properties": {
                "org_id": {
                    "description": "Organization ID",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true
                },
                "org_name": {
                    "description": "Name of the organization",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "profile_name": {
                    "description": "Display name of the user",
                    "type": "string",
                    "maxLength": 255
                },
                "profile_picture": {
                    "description": "Link containing the picture to display",
                    "type": "string",
                    "maxLength": 2048
                }
            }
        },
        "openapi.StatusType": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "reviewing",
                "invited"
            ],
            "x-enum-varnames": [
                "StatusActive",
                "StatusInactive",
                "StatusReviewing",
                "StatusInvited"
            ]
        },
        "openapi.User": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Email address of the user",
                    "type": "string",
                    "format": "email"
                },
                "groups": {
                    "description": "Groups registered for this user",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "sre"
                    ]
                },
                "id": {
                    "description": "Unique identifier of the resource",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true
                },
                "name": {
                    "description": "Display name",
                    "type": "string",
                    "example": "John Wick"
                },
                "password": {
                    "description": "Local auth cases have a password",
                    "type": "string",
                    "example": "password"
                },
                "picture": {
                    "description": "The profile picture url to display",
                    "type": "string",
                    "example": ""
                },
                "role": {
                    "description": "Permission related to the user\n* admin - Has super privileges and has access to any resource in the system\n* standard - Grant access to standard routes.\n* unregistered - Grant access to unregistered routes. It's a transient state where the user is authenticated but is not registered.\nThis state is only available for multi tenant environments",
                    "type": "string",
                    "enum": [
                        "admin",
                        "standard",
                        "unregistered"
                    ],
                    "readOnly": true,
                    "example": "standard"
                },
                "slack_id": {
                    "description": "The identifier of slack to send messages to users",
                    "type": "string",
                    "example": "U053ELZHB53"
                },
                "status": {
                    "description": "The status of the user. Inactive users cannot access the system",
                    "default": "active",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.StatusType"
                        }
                    ]
                },
                "verified": {
                    "description": "DEPRECATED in flavor of role",
                    "type": "boolean",
                    "readOnly": true
                }
            }
        },
        "openapi.UserInfo": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Email address of the user",
                    "type": "string",
                    "format": "email"
                },
                "feature_ask_ai": {
                    "description": "Ask AI feature uses ChatGPT allowing using natural language to construct input based on the context of connections\n* unavailable - the ChatGPT credentials is not available\n* enabled - ChatGPT credentials is available and an administrator has provide consent to send introspection schema to GTP-4\n* disabled - ChatGPT credentials is available and an administrator has not provided consent to send introspection schema to GTP-4",
                    "type": "string",
                    "enum": [
                        "unavailable",
                        "enabled",
                        "disabled"
                    ]
                },
                "groups": {
                    "description": "Groups registered for this user",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "sre"
                    ]
                },
                "id": {
                    "description": "Unique identifier of the resource",
                    "type": "string",
                    "format": "uuid",
                    "readOnly": true
                },
                "intercom_hmac_digest": {
                    "type": "string"
                },
                "is_admin": {
                    "description": "DEPRECATED in flavor of role",
                    "type": "boolean"
                },
                "is_multitenant": {
                    "description": "DEPRECATED is flavor of tenancy_type",
                    "type": "boolean"
                },
                "name": {
                    "description": "Display name",
                    "type": "string",
                    "example": "John Wick"
                },
                "org_id": {
                    "description": "Organization unique identifier",
                    "type": "string",
                    "format": "uuid"
                },
                "org_license": {
                    "description": "DEPRECATED in flavor of license route",
                    "type": "string",
                    "example": ""
                },
                "org_name": {
                    "description": "Organization name",
                    "type": "string",
                    "default": "JohnWickCorp"
                },
                "password": {
                    "description": "Local auth cases have a password",
                    "type": "string",
                    "example": "password"
                },
                "picture": {
                    "description": "The profile picture url to display",
                    "type": "string",
                    "example": ""
                },
                "role": {
                    "description": "Permission related to the user\n* admin - Has super privileges and has access to any resource in the system\n* standard - Grant access to standard routes.\n* unregistered - Grant access to unregistered routes. It's a transient state where the user is authenticated but is not registered.\nThis state is only available for multi tenant environments",
                    "type": "string",
                    "enum": [
                        "admin",
                        "standard",
                        "unregistered"
                    ],
                    "readOnly": true,
                    "example": "standard"
                },
                "slack_id": {
                    "description": "The identifier of slack to send messages to users",
                    "type": "string",
                    "example": "U053ELZHB53"
                },
                "status": {
                    "description": "The status of the user. Inactive users cannot access the system",
                    "default": "active",
                    "allOf": [
                        {
                            "$ref": "#/definitions/openapi.StatusType"
                        }
                    ]
                },
                "tenancy_type": {
                    "description": "The gateway tenancy type\n* selfhosted - Single tenant gateway, organization is registered on gateway startup and signup is performed on login\n* multitenant - Allows multiple organization through a signup process",
                    "type": "string",
                    "enum": [
                        "selfhosted",
                        "multitenant"
                    ]
                },
                "verified": {
                    "description": "DEPRECATED in flavor of role",
                    "type": "boolean",
                    "readOnly": true
                },
                "webapp_users_management": {
                    "description": "Enable or disable Webapp users management\n* on - Enable the users management view on Webapp\n* on - Disable the users management view on Webapp",
                    "type": "string",
                    "default": "on",
                    "enum": [
                        "on",
                        "off"
                    ]
                }
            }
        },
        "openapi.UserPatchSlackID": {
            "type": "object",
            "required": [
                "slack_id"
            ],
            "properties": {
                "slack_id": {
                    "type": "string",
                    "example": "U053ELZHB53"
                }
            }
        },
        "openapi.WebhooksDashboardResponse": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "example": "https://app.svix.com/app_3ZT4NrDlps0Pjp6Af8L6pJMMh3/endpoints"
                }
            }
        }
    },
    "securityDefinitions": {
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://login.microsoftonline.com/d60ba6f0-ad5f-4917-aa19-f8d4241f8bc7/oauth2/v2.0/authorize",
            "tokenUrl": "https://login.microsoftonline.com/d60ba6f0-ad5f-4917-aa19-f8d4241f8bc7/oauth2/v2.0/token",
            "scopes": {
                "email": "",
                "openid": "",
                "profile": ""
            }
        }
    },
    "tags": [
        {
            "description": "Hoop implements Oauth2 and OIDC protocol to authenticate users in the system. To obtain a valid access token users need to authenticate in their own identity provider which is generated as a JSON response to the endpoint ` + "`" + `http(s)://{{ .Host }}{{ .BasePath }}/login` + "`" + `. The identity provider them redirects the user to the callback endpoint containing the access token.\n\nThe recommended approach of obtaining an access token is by visiting the Webapp main's page or using the **Hoop command line**. Example:\n\n` + "`" + `` + "`" + `` + "`" + `sh\nhoop config create --api-url https://{{ .Host }}\n# save the token after authenticating at $HOME/.hoop/config.toml\nhoop login\n# show token information\nhoop config view --raw\n` + "`" + `` + "`" + `` + "`" + `\n\nWith an access token you could use any HTTP client to interact with the documented endpoints.\nThe token must be sent through the ` + "`" + `Authorization` + "`" + ` header.\n\nExample:\n\n` + "`" + `` + "`" + `` + "`" + `sh\n# obtain the current configuration of the server\ncurl https://{{ .Host }}{{ .BasePath }}/serverinfo -H \"Authorization: Bearer $ACCESS_TOKEN\"\n` + "`" + `` + "`" + `` + "`" + `\n",
            "name": "Authentication"
        },
        {
            "description": "Core resources",
            "name": "Core"
        },
        {
            "description": "Users are active and assigned to the default organization when they signup. A user could be set to an inactive state preventing it from accessing the platform, however it’s recommended to manage the state of users in the identity provider.\n\n- The ` + "`" + `sub` + "`" + ` claim is used as the main identifier of the user in the platform.\n- The profile of the user is derived from the id_token claims ` + "`" + `email` + "`" + ` and ` + "`" + `name` + "`" + `.\n\nWhen a user authenticates for the first time, it performs an automatic signup that persist the profile claims along with it’s unique identifier.\n​\n### Groups\n\nGroups allows defining who may access or interact with certain resources.\n\n- For connection resources it’s possible to define which groups has access to a specific connection, this is enforced when the Access Control feature is enabled.\n- For review resources, it’s possible to define which groups are allowed to approve an execution, this is enforced when the Review feature is enabled.\n\n\u003e This resource could be managed manually via Webapp or propagated by the identity provider via ID Token. In this mode, groups are sync when a user performs a login.\n\n### Roles\n\n- The ` + "`" + `admin` + "`" + ` group is a special role that grants full access to all resources\n\nThis role should be granted to users that are responsible for managing the Gateway. All other users are regular, meaning that they can access their own resources and interact with connections.\n",
            "name": "User Management"
        },
        {
            "description": "Routes used to manage and obtain information about the runtime server.",
            "name": "Server Management"
        },
        {
            "description": "Features available in the gateway. See also **Plugin** resources.",
            "name": "Features"
        },
        {
            "description": "Proxy manager endpoints controls how clients connect via gRPC in the gateway. These endpoints are meant to be used when a client is initialized via ` + "`" + `hoop proxy-manager` + "`" + `.",
            "name": "Proxy Manager"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{"https"},
	Title:            "Hoop Api",
	Description:      "Hoop.dev is an access gateway for databases and servers with an API for packet manipulation",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
