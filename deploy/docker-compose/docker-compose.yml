name: hoop

services:
  bootstrap:
    image: hoophq/hooplabs
    networks:
    - hoopdev
    volumes:
    - hoopdata:/hoopdata
    env_file: '.env'
    command: bootstrap.sh
  db:
    image: postgres:16
    networks:
    - hoopdev
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: hoopdb
      # avoid errors on healthcheck
      PGUSER: postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "zitadel", "-U", "postgres"]
      interval: '2s'
      timeout: '30s'
      retries: 10
      start_period: '20s'
  idp:
    image: ghcr.io/zitadel/zitadel:v2.56.0
    command: 'start-from-init --masterkeyFile /hoopdata/zitadel-master.key --tlsMode external'
    user: root
    networks:
    - hoopdev
    volumes:
    - hoopdata:/hoopdata
    environment:
      - ZITADEL_EXTERNALSECURE=true
      - ZITADEL_EXTERNALDOMAIN=${HOOP_PUBLIC_HOSTNAME}
      - ZITADEL_EXTERNALPORT=443
      - ZITADEL_DATABASE_POSTGRES_HOST=db
      - ZITADEL_DATABASE_POSTGRES_PORT=5432
      - ZITADEL_DATABASE_POSTGRES_DATABASE=zitadel
      - ZITADEL_DATABASE_POSTGRES_USER_USERNAME=zitadel
      - ZITADEL_DATABASE_POSTGRES_USER_PASSWORD=zitadel
      - ZITADEL_DATABASE_POSTGRES_USER_SSL_MODE=disable
      - ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME=postgres
      - ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD=postgres
      - ZITADEL_DATABASE_POSTGRES_ADMIN_SSL_MODE=disable
      - ZITADEL_FIRSTINSTANCE_MACHINEKEYPATH=/hoopdata/zitadel-admin-sa.json
      - ZITADEL_FIRSTINSTANCE_ORG_MACHINE_MACHINE_USERNAME=zitadel-admin-sa
      - ZITADEL_FIRSTINSTANCE_ORG_MACHINE_MACHINE_NAME=Admin
      - ZITADEL_FIRSTINSTANCE_ORG_MACHINE_MACHINEKEY_TYPE=1
    depends_on:
      db:
        condition: 'service_healthy'
      bootstrap:
        condition: service_completed_successfully
  nginx:
    image: hoophq/hooplabs
    command: run-nginx.sh
    environment:
    - HOOP_PUBLIC_HOSTNAME=${HOOP_PUBLIC_HOSTNAME}
    volumes:
    - hoopdata:/hoopdata
    depends_on:
    - idp
    ports:
    - 443:443
    networks:
    - hoopdev
    healthcheck:
      test: 'curl -f http://idp:8080/healthz'
      interval: '1s'
      timeout: '30s'
      retries: 15
      start_period: '20s'
  idp-provisioner:
    image: hoophq/hooplabs
    environment:
    - TF_VAR_public_hostname=${HOOP_PUBLIC_HOSTNAME}
    command: run-idp-provisioner.sh
    networks:
    - hoopdev
    volumes:
    - hoopdata:/hoopdata
    depends_on:
      nginx:
        condition: 'service_healthy'
  gateway:
    image: hoophq/hooplabs
    environment:
    - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/hoop/bin
    - LOG_LEVEL=info
    - LOG_ENCODING=console
    - GIN_MODE=release
    - PLUGIN_AUDIT_PATH=/hoopdata/sessions
    - PLUGIN_INDEX_PATH=/hoopdata/sessions/indexes
    - STATIC_UI_PATH=/opt/hoop/webapp/public
    - MIGRATION_PATH_FILES=/opt/hoop/migrations
    - POSTGRES_DB_URI=postgres://postgres:postgres@db:5432/hoopdb?sslmode=disable
    - API_URL=https://${HOOP_PUBLIC_HOSTNAME}
    - GRPC_URL=grpcs://${HOOP_PUBLIC_HOSTNAME}:443
    env_file: '.env'
    volumes:
    - hoopdata:/hoopdata/
    command: run-gateway.sh
    networks:
    - hoopdev
    depends_on:
      idp-provisioner:
        condition: service_completed_successfully
    healthcheck:
      test: 'curl http://127.0.0.1:8009/api/healthz'
      interval: '2s'
      timeout: '30s'
      retries: 10
      start_period: '20s'
  agent:
    image: hoophq/hooplabs
    volumes:
    - hoopdata:/hoopdata/
    networks:
    - hoopdev
    environment:
    - PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/hoop/bin
    - LOG_LEVEL=info
    - LOG_ENCODING=console
    - GRPC_URL=${HOOP_PUBLIC_HOSTNAME}:443
    - POSTGRES_DB_URI=postgres://postgres:postgres@db:5432/hoopdb?sslmode=disable
    depends_on:
      gateway:
        condition: 'service_healthy'
    command: run-agent.sh

volumes:
  hoopdata: null

networks:
  hoopdev: