(ns webapp.webclient.aside.database-schema
  (:require ["@radix-ui/themes" :refer [Em Text]]
            ["lucide-react" :refer [ChevronDown ChevronRight Hash Database File FolderClosed FolderOpen Table]]
            [reagent.core :as r]
            [re-frame.core :as rf]
            [webapp.subs :as subs]
            [webapp.webclient.aside.mongodb-schema :as mongodb-schema]
            [webapp.config :as config]))

(def ^:private get-postgres-databases-query
  " -- Generated by hoop.dev
   COPY (
     SELECT datname AS database_name
     FROM pg_database
     WHERE datistemplate = false
     ORDER BY datname
   )
   TO STDOUT WITH DELIMITER E'\t'CSV HEADER;")

(def ^:private get-mysql-schema-query
  " -- Generated by hoop.dev
   SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, DATA_TYPE, IS_NULLABLE
   FROM INFORMATION_SCHEMA.COLUMNS
   WHERE TABLE_SCHEMA NOT IN ('information_schema', 'performance_schema', 'mysql', 'pg_catalog', 'sys')
   ORDER BY TABLE_SCHEMA, TABLE_NAME, ORDINAL_POSITION;")

(def ^:private get-postgres-schema-query
  " -- Generated by hoop.dev
   COPY (SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, DATA_TYPE, IS_NULLABLE
   FROM INFORMATION_SCHEMA.COLUMNS
   WHERE TABLE_SCHEMA NOT IN ('information_schema', 'performance_schema', 'mysql', 'pg_catalog', 'sys')
   ORDER BY TABLE_SCHEMA, TABLE_NAME, ORDINAL_POSITION)
   TO STDOUT WITH DELIMITER E'\t'CSV HEADER;")

(def ^:private get-sql-server-schema-query
  "-- Generated by hoop.dev
SELECT
    TABLE_SCHEMA,
    TABLE_NAME,
    COLUMN_NAME,
    DATA_TYPE,
    IS_NULLABLE
  FROM
    INFORMATION_SCHEMA.COLUMNS
  WHERE
    TABLE_SCHEMA NOT IN ('information_schema', 'sys', 'mysql', 'msdb', 'tempdb', 'model')
  ORDER BY
    TABLE_SCHEMA,
    TABLE_NAME,
    ORDINAL_POSITION")

(def ^:private get-oracledb-schema-query
  "-- Generated by hoop.dev
SELECT
    t.owner AS table_schema,
    t.table_name,
    c.column_name,
    c.data_type,
    CASE
        WHEN c.nullable = 'Y' THEN 'YES'
        ELSE 'NO'
    END AS is_nullable
FROM
    all_tables t
JOIN
    all_tab_columns c ON t.table_name = c.table_name AND t.owner = c.owner
WHERE
    t.owner NOT IN ('SYS', 'SYSTEM', 'OUTLN', 'DBSNMP', 'XDB', 'APEX_040000', 'WMSYS', 'ORDDATA', 'CTXSYS', 'MGMT_VIEW')
ORDER BY
    t.owner,
    t.table_name,
    c.column_id;")

(def ^:private get-mysql-schema-with-index-query
  "-- Generated by hoop.dev
   SELECT c.TABLE_SCHEMA, c.TABLE_NAME, s.index_name, s.seq_in_index, s.column_name
   FROM INFORMATION_SCHEMA.COLUMNS c
   INNER JOIN INFORMATION_SCHEMA.statistics s ON c.table_name = s.table_name
   WHERE c.TABLE_SCHEMA NOT IN ('information_schema', 'performance_schema', 'mysql', 'pg_catalog')
   AND c.table_schema = s.table_schema
   ORDER BY c.TABLE_SCHEMA, c.TABLE_NAME, c.ORDINAL_POSITION;")

(def ^:private get-postgres-schema-with-index-query
  "-- Generated by hoop.dev
   COPY (select schemaname, tablename, indexname, tablespace, indexdef
   from pg_indexes where schemaname = ('public') order by tablename)
   TO STDOUT WITH DELIMITER E'\t'CSV HEADER;")

(def ^:private get-sql-server-schema-with-index-query
  "-- Generated by hoop.dev
SELECT
     TableSchema = c.TABLE_SCHEMA,
     TableName = t.name,
     IndexName = ind.name,
     IndexId = ind.index_id,
     ColumnName = col.name

FROM
     sys.indexes ind
INNER JOIN
     sys.index_columns ic ON  ind.object_id = ic.object_id and ind.index_id = ic.index_id
INNER JOIN
     sys.columns col ON ic.object_id = col.object_id and ic.column_id = col.column_id
INNER JOIN
     sys.tables t ON ind.object_id = t.object_id
INNER JOIN
     INFORMATION_SCHEMA.COLUMNS c ON t.name = c.TABLE_NAME
WHERE
     ind.is_primary_key = 0
     AND ind.is_unique = 0
     AND ind.is_unique_constraint = 0
     AND t.is_ms_shipped = 0
ORDER BY
     c.TABLE_SCHEMA, t.name, ic.key_ordinal;")

(def ^:private get-oracledb-schema-with-index-query
  "-- Generated by hoop.dev
SELECT
    t.owner AS table_schema,
    t.table_name,
    i.index_name,
    ic.column_name,
    ic.column_position AS index_id
FROM
    all_indexes i
JOIN
    all_ind_columns ic ON i.index_name = ic.index_name AND i.table_owner = ic.table_owner AND i.table_name = ic.table_name
JOIN
    all_tables t ON i.table_name = t.table_name AND i.table_owner = t.owner
JOIN
    all_tab_columns c ON t.table_name = c.table_name AND t.owner = c.table_owner AND ic.column_name = c.column_name
WHERE
    i.uniqueness = 'NONUNIQUE'  -- Filtros para índices não primários e não únicos
    AND i.index_type = 'NORMAL' -- Evita índices de tipo 'FUNCTION-BASED NORMAL'
    AND i.table_owner NOT IN ('SYS', 'SYSTEM') -- Exclui esquemas de sistema
ORDER BY
    t.owner,
    t.table_name,
    ic.column_position;")

(def ^:private get-mongodb-schema-query
  " // Generated by hoop.dev
JSON.stringify(db.getMongo().getDBNames().reduce((acc, current) => {
  const currentCollections = db.getSiblingDB(current).getCollectionNames();
  const collectionsWithFields = currentCollections.reduce((accCollection, currCollection) => {
    accCollection[currCollection] = {};
    return accCollection;
  }, {});
  acc[current] = collectionsWithFields;
  return acc;
}, {}));")

(defmulti get-database-schema identity)
(defmethod get-database-schema "oracledb" [_ connection]
  (rf/dispatch [:editor-plugin->get-mysql-schema
                connection
                get-oracledb-schema-query
                get-oracledb-schema-with-index-query]))
(defmethod get-database-schema "sql-server-csv" [_ connection]
  (rf/dispatch [:editor-plugin->get-mysql-schema
                connection
                get-sql-server-schema-query
                get-sql-server-schema-with-index-query]))
(defmethod get-database-schema "mssql" [_ connection]
  (rf/dispatch [:editor-plugin->get-mysql-schema
                connection
                get-sql-server-schema-query
                get-sql-server-schema-with-index-query]))
(defmethod get-database-schema "postgres-csv" [_ connection]
  (let [selected-db (.getItem js/localStorage "selected-database")
        base-switch (when selected-db
                      (str "\\set QUIET on\n\\c " selected-db "\n\\set QUIET off\n"))
        schema-script (str base-switch get-postgres-schema-query)
        index-script (str base-switch get-postgres-schema-with-index-query)]
    (rf/dispatch [:editor-plugin->get-postgres-schema
                  connection
                  get-postgres-databases-query
                  schema-script
                  index-script])))
(defmethod get-database-schema "postgres" [_ connection]
  (let [selected-db (.getItem js/localStorage "selected-database")
        base-switch (when selected-db
                      (str "\\set QUIET on\n\\c " selected-db "\n\\set QUIET off\n"))
        schema-script (str base-switch get-postgres-schema-query)
        index-script (str base-switch get-postgres-schema-with-index-query)]
    (rf/dispatch [:editor-plugin->get-postgres-schema
                  connection
                  get-postgres-databases-query
                  schema-script
                  index-script])))
(defmethod get-database-schema "mysql-csv" [_ connection]
  (rf/dispatch [:editor-plugin->get-mysql-schema
                connection
                get-mysql-schema-query
                get-mysql-schema-with-index-query]))
(defmethod get-database-schema "mysql" [_ connection]
  (rf/dispatch [:editor-plugin->get-mysql-schema
                connection
                get-mysql-schema-query
                get-mysql-schema-with-index-query]))
(defmethod get-database-schema "mongodb" [_ connection]
  (rf/dispatch [:editor-plugin->get-mongodb-schema
                connection
                get-mongodb-schema-query]))

(defn- field-type-tree [type]
  [:div {:class "pl-regular italic"}
   (str "(" type ")")])

(defn- indexes-columns-tree []
  (fn [columns]
    [:div {:class "pl-small"}
     (doall
      (for [[number column] (into (sorted-map) columns)]
        ^{:key (str number column)}
        [:div {:class "flex items-center gap-small mb-2"}
         [:> Hash {:size 14}]
         [:> Text {:size "1" :class "px-1"}
          (str number " -")]
         (doall
          (for [[column-name _] column]
            ^{:key column-name}
            [:> Text {:size "1"} column-name]))]))]))

(defn- indexes-tree [_]
  (let [dropdown-status (r/atom :closed)]
    (fn [indexes]
      [:div {:class "pl-small"}
       [:div
        [:div {:class "flex items-center gap-small mb-2"}
         (if (= @dropdown-status :closed)
           [:> FolderClosed {:size 12}]
           [:> FolderOpen {:size 12}])
         [:> Text {:size "1"
                   :class (str "hover:underline cursor-pointer "
                               "flex items-center")
                   :on-click #(reset! dropdown-status
                                      (if (= @dropdown-status :open) :closed :open))}
          "Indexes"
          (if (= @dropdown-status :open)
            [:> ChevronDown {:size 12}]
            [:> ChevronRight {:size 12}])]]]
       [:div {:class (when (not= @dropdown-status :open)
                       "h-0 overflow-hidden")}
        (doall
         (for [[index columns-names] indexes]
           ^{:key index}
           [:div {:class "pl-small"}
            [:div {:class "flex items-center gap-small mb-2"}
             [:> Hash {:size 14}]
             [:> Text {:size "1" :class "flex items-center"}
              index]]
            [indexes-columns-tree columns-names]]))]])))

(defn- fields-tree [fields]
  (let [dropdown-status (r/atom {})
        dropdown-columns-status (r/atom :closed)]
    (fn []
      [:div {:class "pl-small"}
       [:div
        [:div {:class "flex items-center gap-small mb-2"}
         (if (= @dropdown-columns-status :closed)
           [:> FolderClosed {:size 12}]
           [:> FolderOpen {:size 12}])
         [:> Text {:size "1"
                   :class (str "hover:underline cursor-pointer "
                               "flex items-center")
                   :on-click #(reset! dropdown-columns-status
                                      (if (= @dropdown-columns-status :open) :closed :open))}
          "Columns"
          (if (= @dropdown-columns-status :open)
            [:> ChevronDown {:size 12}]
            [:> ChevronRight {:size 12}])]]]
       [:div {:class (str "pl-small" (when (not= @dropdown-columns-status :open)
                                       " h-0 overflow-hidden"))}
        (doall
         (for [[field field-type] fields]
           ^{:key field}
           [:div
            [:div {:class "flex items-center gap-small mb-2"}
             [:> File {:size 12}]
             [:span {:class (str "hover:text-blue-500 hover:underline cursor-pointer "
                                 "flex items-center")
                     :on-click #(swap! dropdown-status
                                       assoc-in [field]
                                       (if (= (get @dropdown-status field) :open) :closed :open))}
              [:> Text {:size "1"} field]
              (if (= (get @dropdown-status field) :open)
                [:> ChevronDown {:size 12}]
                [:> ChevronRight {:size 12}])]]
            [:div {:class (when (not= (get @dropdown-status field) :open)
                            "h-0 overflow-hidden")}
             [field-type-tree (first (map key field-type))]]]))]])))

(defn- tables-tree []
  (let [dropdown-status (r/atom {})]
    (fn [tables indexes]
      [:div {:class "pl-small"}
       (doall
        (for [[table fields] tables]
          ^{:key table}
          [:div
           [:div {:class "flex items-center gap-small mb-2"}
            [:> Table {:size 12}]
            [:span {:class (str "hover:text-blue-500 hover:underline cursor-pointer "
                                "flex items-center")
                    :on-click #(swap! dropdown-status
                                      assoc-in [table]
                                      (if (= (get @dropdown-status table) :open) :closed :open))}
             [:> Text {:size "1"} table]
             (if (= (get @dropdown-status table) :open)
               [:> ChevronDown {:size 12}]
               [:> ChevronRight {:size 12}])]]
           [:div {:class (when (not= (get @dropdown-status table) :open)
                           "h-0 overflow-hidden")}
            [fields-tree (into (sorted-map) fields)]
            [indexes-tree (into (sorted-map) (get indexes table))]]]))])))

(defn- sql-databases-tree [_]
  (let [dropdown-status (r/atom {})]
    (fn [schema indexes has-database?]
      [:div {:class (when has-database?
                      "pl-small")}
       (doall
        (for [[db tables] schema]
          ^{:key db}
          [:div
           [:div {:class "flex items-center gap-small mb-2"}
            [:> Database {:size 12}]
            [:span {:class (str "hover:text-blue-500 hover:underline cursor-pointer "
                                "flex items-center")
                    :on-click #(swap! dropdown-status
                                      assoc-in [db]
                                      (if (= (get @dropdown-status db) :closed) :open :closed))}
             [:> Text {:size "1"} db]
             (if (not= (get @dropdown-status db) :closed)
               [:> ChevronDown {:size 12}]
               [:> ChevronRight {:size 12}])]]
           [:div {:class (when (= (get @dropdown-status db) :closed)
                           "h-0 overflow-hidden")}
            [tables-tree (into (sorted-map) tables) (into (sorted-map) (get indexes db))]]]))])))

(defn- databases-tree []
  (let [open-database (r/atom nil)]
    (fn [databases schema indexes initial-database connection-name database-schema-status]
      (when (and initial-database (nil? @open-database))
        (reset! open-database initial-database)
        (.setItem js/localStorage "selected-database" initial-database))
      (let [selected-db (.getItem js/localStorage "selected-database")]
        [:div.text-xs
         (doall
          (for [db databases]
            ^{:key db}
            [:div
             [:div {:class "flex items-center gap-smal mb-2"}
              [:span {:class (str "hover:text-blue-500 hover:underline cursor-pointer "
                                  "flex items-center "
                                  (when (= db selected-db) "text-blue-500"))
                      :on-click (fn []
                                  (.setItem js/localStorage "selected-database" db)
                                  (reset! open-database (when (not= @open-database db) db))
                                  (get-database-schema
                                   "postgres" {:connection-type "postgres"
                                               :connection-name connection-name}))}
               [:> Text {:size "1" :weight "bold"} db]
               (if (= @open-database db)
                 [:> ChevronDown {:size 12}]
                 [:> ChevronRight {:size 12}])]]
             [:div {:class (when (not= @open-database db)
                             "h-0 overflow-hidden")}
              (if (= :loading database-schema-status)
                [:div
                 {:class "flex gap-small items-center pb-small ml-small text-xs"}
                 [:span {:class "italic"}
                  "Loading tables and indexes"]
                 [:figure {:class "w-3 flex-shrink-0 animate-spin opacity-60"}
                  [:img {:src (str config/webapp-url "/icons/icon-loader-circle-white.svg")}]]]
                (if (empty? schema)
                  [:> Text {:as "p" :size "1" :mb "2" :ml "2"}
                   "Couldn't load tables for this database"]
                  [sql-databases-tree schema indexes true]))]]))]))))

(defn db-view [{:keys [type
                       schema
                       indexes
                       databases
                       initial-database
                       connection-name
                       database-schema-status]}]
  (case type
    "oracledb" [sql-databases-tree (into (sorted-map) schema) (into (sorted-map) indexes) false]
    "sql-server-csv" [sql-databases-tree (into (sorted-map) schema) (into (sorted-map) indexes) false]
    "mssql" [sql-databases-tree (into (sorted-map) schema) (into (sorted-map) indexes) false]
    "postgres-csv" [databases-tree databases (into (sorted-map) schema) (into (sorted-map) indexes) initial-database connection-name database-schema-status]
    "postgres" [databases-tree databases (into (sorted-map) schema) (into (sorted-map) indexes) initial-database connection-name database-schema-status]
    "mysql-csv" [sql-databases-tree (into (sorted-map) schema) (into (sorted-map) indexes) false]
    "mysql" [sql-databases-tree (into (sorted-map) schema) (into (sorted-map) indexes) false]
    "mongodb" [mongodb-schema/main schema]
    [:> Text {:size "1"}
     "Couldn't load the schema"]))

(defn tree-view-status [{:keys [status
                                databases
                                schema
                                indexes
                                connection
                                initial-database
                                database-schema-status]}]
  (case status
    :loading [:div
              {:class "flex gap-small items-center py-regular text-xs"}
              [:span {:class "italic"}
               "Loading schema"]
              [:figure {:class "w-3 flex-shrink-0 animate-spin opacity-60"}
               [:img {:src (str config/webapp-url "/icons/icon-loader-circle-white.svg")}]]]
    :failure [:div
              {:class "flex gap-small items-center py-regular text-xs"}
              [:span
               "Couldn't load the schema"]]
    :success [db-view {:type (:connection-type connection)
                       :schema schema
                       :indexes indexes
                       :databases databases
                       :initial-database initial-database
                       :connection-name (:connection-name connection)
                       :database-schema-status database-schema-status}]
    [:div
     {:class "flex gap-small items-center py-regular text-xs"}
     [:span {:class "italic"}
      "Loading schema"]
     [:figure {:class "w-3 flex-shrink-0 animate-spin opacity-60"}
      [:img {:src (str config/webapp-url "/icons/icon-loader-circle-white.svg")}]]]))

(defn main [connection]
  (let [database-schema (rf/subscribe [::subs/database-schema])
        local-connection (r/atom (:connection-name connection))]

    (when (and connection (:connection-name connection))
      (get-database-schema (:connection-type connection) connection))

    (fn [{:keys [connection-type connection-name]}]
      (when (not= @local-connection connection-name)
        (reset! local-connection connection-name)
        ;; Removemos o clear do schema aqui também
        (get-database-schema connection-type {:connection-type connection-type
                                              :connection-name connection-name}))

      (let [current-schema (get-in @database-schema [:data connection-name])]
        [:div {:class "text-gray-200"}
         [tree-view-status
          {:status (:status current-schema)
           :databases (:databases current-schema)
           :schema (:schema-tree current-schema)
           :indexes (:indexes-tree current-schema)
           :connection connection
           :initial-database (:connection-database-selected connection)
           :database-schema-status (:database-schema-status current-schema)}]]))))

